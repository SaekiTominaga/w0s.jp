---
import { getHTMLId } from '@util/crypto';

interface Props {
	trainImage: string;
	toImage: string;
}

const { trainImage: trainImageFileName, toImage: toImageFileName } = Astro.props;

const trainContent = await Astro.slots.render('train');
const trainImageAltId = getHTMLId(trainContent);

const toContent = await Astro.slots.render('to');
const toImageAltId = getHTMLId(toContent);
---

<div class="panel">
	<section>
		<h2>種別</h2>

		<object data={`/tokyu/set/image/${trainImageFileName}`} type="image/png" role="img" width="460" height="460" class="image" aria-labelledby={trainImageAltId}>
			<div id={trainImageAltId} set:html={trainContent} />
		</object>
	</section>

	<section>
		<h2>行先</h2>

		<object data={`/tokyu/set/image/${toImageFileName}`} role="img" type="image/png" width="460" height="460" class="image" aria-labelledby={toImageAltId}>
			<div id={toImageAltId} set:html={toContent} />
		</object>
	</section>
</div>

<style>
	@layer component {
		.panel {
			display: block grid;
			grid-template-columns: repeat(2, 1fr);
			gap: 15px;
			background: var(--color-lightyellow);
			padding: 15px;
			line-height: var(--line-height-narrow);

			@container content (inline-size <= 30em) {
				grid-template-columns: 1fr;
				gap: 30px;
			}

			& :global(h2) {
				margin-block-end: 10px;
				padding-inline-start: 0.5em;
				text-align: center;
				letter-spacing: 0.5em;
				font-size: 18px;
				font-weight: var(--font-weight-bold);
			}
		}

		.image {
			display: block flow;
			block-size: auto;
			max-inline-size: 100%;
		}
	}
</style>
