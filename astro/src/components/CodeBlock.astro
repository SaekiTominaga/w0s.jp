---
import hljs from 'highlight.js/lib/core';
import hljsJavaScript from 'highlight.js/lib/languages/javascript';
import hljsXml from 'highlight.js/lib/languages/xml';
import md5 from 'md5';

interface Props {
	code: string;
	language?: string;
}

const { code, language } = Astro.props;

const id = `code-${md5(code)}`; // コード ID

hljs.registerLanguage('xml', hljsXml);
hljs.registerLanguage('javascript', hljsJavaScript);

let registLanguageName: string | undefined;
if (language !== undefined) {
	switch (language) {
		case 'xml':
		case 'html':
		case 'svg': {
			registLanguageName = 'xml';
			break;
		}
		case 'javascript': {
			registLanguageName = 'javascript';
			break;
		}
		default: {
			console.warn('無効な言語名', language);
		}
	}
}

const highlighted = registLanguageName !== undefined ? hljs.highlight(code, { language: registLanguageName }).value : undefined;
---

<figure>
	<div class="code-block">
		<div class="clipboard">
			<button type="button" class="clipboard-button js-button-clipboard" data-target={id}>
				<img src="/assets/image/copy.svg" alt="コピー" width="16" height="16" />
			</button>
		</div>
		<pre class="code">{highlighted !== undefined && <code id={id} set:html={highlighted} />}{highlighted === undefined && <code id={id}>{code}</code>}</pre>
	</div>
</figure>

<style>
	@layer component {
		.code-block {
			position: relative;
			contain: content;
		}

		.clipboard {
			display: none;
			position: absolute;
			inset-block-start: 0.5em;
			inset-inline-end: 0.5em;

			.code-block:hover > :global(&) {
				display: block flow;
			}
		}

		.clipboard-button {
			--_bg-color: var(--color-bg-superlight);
			--_ripple-color: var(--color-black);
			--_ripple-opacity: 0.25;
			--_ripple-transition-duration: 0.5s;

			display: block flow;
			contain: layout; /* ripple effect */
			outline-offset: -1px;
			outline-width: var(--outline-width-bold);
			border: 1px solid var(--color-border-light);
			border-radius: var(--border-radius-normal);
			background: var(--_bg-color);
			padding: 0.5em;
			overflow: hidden; /* ripple effect */
			color: var(--color-black);

			&:hover {
				--_bg-color: var(--color-white);
			}

			/* ripple effect */
			&::before {
				position: absolute;
				inset: 0;
				transform: scale(4);
				transition: var(--_ripple-transition-duration);
				opacity: 0;
				background-image: radial-gradient(circle, var(--_ripple-color) 25%, transparent 0);
				block-size: 100%;
				inline-size: 100%;
				content: '';
			}

			/* ripple effect */
			&:active::before {
				transform: scale(0);
				transition: initial;
				opacity: var(--_ripple-opacity);
			}

			& > :global(img) {
				display: block flow;
				block-size: 1em;
				inline-size: 1em;
			}
		}

		.code {
			border: 1px solid var(--color-border-light);
			background: var(--color-white);
			padding: 1em;
			overflow-x: auto;
			line-height: var(--line-height-narrow);
			color: var(--color-black);

			&:focus {
				border-color: var(--outline-color); /* 横スクロールバーが表示される場合はブラウザによってフォーカス可能 */
			}

			& > :global(code) {
				color: #24292e; /* https://github.com/highlightjs/highlight.js/blob/main/src/styles/github.css */
			}

			/* stylelint-disable selector-class-pattern */
			& > :global(code > :is(.hljs-doctag, .hljs-keyword, .hljs-template-tag, .hljs-template-variable, .hljs-type, .hljs-variable.language_)) {
				/* prettylights-syntax-keyword */
				color: #d73a49;
			}

			& > :global(code > :is(.hljs-title, .hljs-title.class_, .hljs-title.class_.inherited__, .hljs-title.function_)) {
				/* prettylights-syntax-entity */
				color: #6f42c1;
			}

			& > :global(code > :is(.hljs-attr, .hljs-attribute, .hljs-literal, .hljs-meta, .hljs-number, .hljs-operator, .hljs-variable, .hljs-selector-attr, .hljs-selector-class, .hljs-selector-id)) {
				/* prettylights-syntax-constant */
				color: #005cc5;
			}

			& > :global(code > :is(.hljs-regexp, .hljs-string)) {
				/* prettylights-syntax-string */
				color: #032f62;
			}

			& > :global(code > :is(.hljs-built_in, .hljs-symbol)) {
				/* prettylights-syntax-variable */
				color: #e36209;
			}

			& > :global(code > :is(.hljs-comment, .hljs-code, .hljs-formula)) {
				/* prettylights-syntax-comment */
				color: #6a737d;
			}

			& > :global(code > :is(.hljs-name, .hljs-quote, .hljs-selector-tag, .hljs-selector-pseudo)) {
				/* prettylights-syntax-entity-tag */
				color: #22863a;
			}

			& > :global(code > :is(.hljs-subst)) {
				/* prettylights-syntax-storage-modifier-import */
				color: #24292e;
			}

			& > :global(code > :is(.hljs-section)) {
				/* prettylights-syntax-markup-heading */
				color: #005cc5;
				font-weight: var(--font-weight-bold);
			}

			& > :global(code > :is(.hljs-bullet)) {
				/* prettylights-syntax-markup-list */
				color: #735c0f;
			}

			& > :global(code > :is(.hljs-emphasis)) {
				/* prettylights-syntax-markup-italic */
				color: #24292e;
				font-style: italic;
			}

			& > :global(code > :is(.hljs-strong)) {
				/* prettylights-syntax-markup-bold */
				color: #24292e;
				font-weight: var(--font-weight-bold);
			}

			& > :global(code > :is(.hljs-addition)) {
				/* prettylights-syntax-markup-inserted */
				background-color: #f0fff4;
				color: #22863a;
			}

			& > :global(code > :is(.hljs-deletion)) {
				/* prettylights-syntax-markup-deleted */
				background-color: #ffeef0;
				color: #b31d28;
			}

			& > :global(code > :is(.hljs-char.escape_, .hljs-link, .hljs-params, .hljs-property, .hljs-punctuation, .hljs-tag)) {
				/* purposely ignored */
			}
			/* stylelint-enable selector-class-pattern */
		}
	}
</style>
