---
interface Props {
	ctrlType?: 'checkbox' | 'radio';
}

const { ctrlType } = Astro.props;

const validate = await Astro.slots.render('validate');
const note = await Astro.slots.render('note');
---

<div class="group">
	<fieldset>
		<legend class="legend">
			<slot name="legend" />
		</legend>

		<div class="contents">
			<div class:list={['ctrl', ctrlType !== undefined ? `-${ctrlType}` : undefined]}>
				<slot name="contents" />
			</div>

			{validate !== undefined && <div class="validate" set:html={validate} />}

			{note !== undefined && <div class="note" set:html={note} />}
		</div>
	</fieldset>
</div>

<style>
	.group {
		display: block grid;
		grid-template-columns: subgrid;
		grid-column: legend / contents;

		& > :global(fieldset) {
			display: contents;
		}
	}

	.legend {
		grid-column: legend;
		font-weight: var(--font-weight-bold);
	}

	.contents {
		--_gap-row: 1em;
		--_gap-col: 1em;

		grid-column: contents;

		& > :global(* + *) {
			margin-block-start: calc(var(--stack-margin-base) / 3);
		}
	}

	@container content (inline-size > 36em) {
		.legend {
			margin-block-start: calc(0.5em + 1px);
		}
	}

	@container content (inline-size <= 36em) {
		.contents {
			margin-block-start: 0.25em;
		}
	}

	.ctrl {
		--_gap-row: 1em;
		--_gap-col: 1em;

		display: block flex;
		flex-flow: wrap;
		gap: var(--_gap-row) var(--_gap-col);
		align-items: center;

		/* チェックボックス、ラジオボタン */
		&:is(.-checkbox, .-radio) {
			--_gap-row: 0em;
		}

		& > :global([role='radiogroup']) {
			display: contents;
		}
	}

	.validate {
	}

	.note {
		color: var(--color-gray);
		font-size: calc(100% / pow(var(--font-ratio), 1));
	}
</style>
