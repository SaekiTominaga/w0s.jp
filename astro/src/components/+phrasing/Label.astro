---
import { JSDOM } from 'jsdom';

interface Props {
	label: string;
}

const { label } = Astro.props;

const { document } = new JSDOM(await Astro.slots.render('default')).window;

const checkboxCtrl = document.querySelector('input[type="checkbox"]') !== null;
const radioCtrl = document.querySelector('input[type="radio"]') !== null;
const switchCtrl = document.querySelector('w0s-input-switch') !== null;
---

<label class:list={['label', checkboxCtrl ? '-checkbox' : undefined, radioCtrl ? '-radio' : undefined]}>
	{(checkboxCtrl || radioCtrl || switchCtrl) && <slot />}

	<span class="text">{label}</span>

	{!checkboxCtrl && !radioCtrl && !switchCtrl && <slot />}
</label>

<style>
	.label {
		display: inline flex;
		flex-wrap: wrap;
		gap: 0.5em;
		align-items: center;

		/* 一行入力欄 */
		&.-text {
		}

		/* チェックボックス、ラジオボタン */
		&:is(.-checkbox, .-radio) {
			--_border-color: transparent;
			--_bg-color: transparent;

			margin-block: 0.25em;
			border: 1px solid var(--_border-color);
			border-radius: var(--border-radius-normal);
			background: var(--_bg-color);
			padding: 0.25em;

			&:hover {
				--_border-color: var(--color-superlightblue);
				--_bg-color: var(--color-superlightblue);
			}

			&:focus-within {
				--_border-color: var(--color-superlightblue);
				--_bg-color: var(--color-superlightblue);

				outline: var(--outline-width-bold) solid var(--outline-color);
			}

			:global([aria-invalid='true']) > & {
				--_border-color: var(--invalid-border-color);
				--_bg-color: var(--color-verylightred);
			}

			& :global(input) {
				outline: none;
				block-size: 1em;
				inline-size: 1em;
			}
		}
	}

	.text {
	}
</style>
