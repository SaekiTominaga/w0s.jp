---
interface Props {
	href: string;
	type?: string;
	icon?: boolean;
	class?: string;
}

interface TypeIcon {
	type: string;
	name: string;
	file_name: string;
}

interface HostIcon {
	host: string;
	name: string;
	file_name: string;
}

const TYPE_ICONS: TypeIcon[] = [
	{
		type: 'application/pdf',
		name: 'PDF',
		file_name: 'pdf.png',
	},
];

const HOST_ICONS: HostIcon[] = [
	{
		host: 'github.com',
		name: 'GitHub',
		file_name: 'github.svg',
	},
	{
		host: 'www.youtube.com',
		name: 'YouTube',
		file_name: 'youtube.svg',
	},
	{
		host: 'x.com',
		name: 'X',
		file_name: 'x.png',
	},
	{
		host: 'www.amazon.co.jp',
		name: 'Amazon',
		file_name: 'amazon.png',
	},
	{
		host: 'ndlsearch.ndl.go.jp',
		name: '国立国会図書館サーチ',
		file_name: 'ndlsearch.svg',
	},
	{
		host: 'dl.ndl.go.jp',
		name: '国立国会図書館デジタルコレクション',
		file_name: 'ndldl.svg',
	},
	{
		host: 'www.nicovideo.jp',
		name: 'ニコニコ動画',
		file_name: 'nicovideo.png',
	},
	{
		host: 'www.w3.org',
		name: 'W3C',
		file_name: 'w3c.png',
	},
	{
		host: 'html.spec.whatwg.org',
		name: 'WHATWG',
		file_name: 'whatwg.svg',
	},
];

const { href, type, class: className, icon = true } = Astro.props;

let urlStr = href;
if (href.match(/^https:\/\/www\.amazon\.[a-z]+(\.[a-z]+)?\/dp\/([A-Z0-9]{10})\/$/)) {
	urlStr = `${href}ref=nosim?tag=w0s.jp-22`;
}

let url: URL;
try {
	url = new URL(urlStr);
} catch {
	console.warn('`href` attribute value is not a valid URL:', href);
	return;
}

const typeIcon = type !== undefined ? TYPE_ICONS.find((data) => data.type === type) : undefined;
const hostIcon = HOST_ICONS.find((data) => data.host === url.host);
---

<a href={url.toString()} rel="external" class:list={className}><slot /></a>{icon && typeIcon !== undefined && <img src={`/assets/image/icon/${typeIcon.file_name}`} alt={`(${typeIcon.name})`} width="16" height="16" class="c-link-icon" />}{icon && hostIcon !== undefined && (<small class="c-domain"><img src={`/assets/image/icon/${hostIcon.file_name}`} alt={`(${hostIcon.name})`} width="16" height="16" /></small>)}{icon && hostIcon === undefined && (<small class="c-domain">(<code>{url.host}</code>)</small>)}&#32;
