---
interface Props {
	name: string;
	current?: boolean;
	hidden?: boolean;
	jsClassName?: string;
}

const { name, current, hidden, jsClassName } = Astro.props;
---

<li class={jsClassName} hidden={hidden}>
	{!current && <span class="text">{name}</span>}
	{current && <em class:list={['text', '-current']}>{name}</em>}
</li>

<style>
	li {
		position: relative;
		flex: auto;
		margin-inline-end: var(--_step-arrow-inline-size);
		text-align: center;
		font-size: calc(100% * pow(var(--font-ratio), 1));

		&:not(:first-child) {
			& .text {
				padding-inline-start: 1.5em;
			}
		}

		&:not(:last-child) {
			&::after {
				position: absolute;
				inset-block-start: calc(50% - var(--_step-arrow-block-size) - var(--_step-arrow-inline-size));
				inset-inline-start: 100%;
				transform: translateX(var(--_step-arrow-inline-size));
				z-index: 1;
				border-block: calc(var(--_step-arrow-block-size) + var(--_step-arrow-inline-size)) solid transparent;
				border-inline-start: calc(var(--_step-arrow-block-size) * var(--_step-arrow-inclination)) solid var(--_step-arrow-color);
				content: '';
			}
		}
	}

	.text {
		--_color: var(--color-black);
		--_bg-color: var(--color-bg-verydark);

		display: block flow;
		background: var(--_bg-color);
		padding: 0.5em;
		color: var(--_color);

		li:not(:last-child) &::after {
			position: absolute;
			inset-block-start: calc(50% - var(--_step-arrow-block-size) - var(--_step-arrow-inline-size));
			inset-inline-start: 100%;
			z-index: 2;
			border-block: calc(var(--_step-arrow-block-size) + var(--_step-arrow-inline-size)) solid transparent;
			border-inline-start: calc(var(--_step-arrow-block-size) * var(--_step-arrow-inclination)) solid;
			border-inline-start-color: var(--_bg-color);
			content: '';
		}

		&.-current {
			--_color: var(--color-darkgray);
			--_bg-color: var(--color-lightred);

			font-weight: var(--font-weight-bold);
		}
	}
</style>
