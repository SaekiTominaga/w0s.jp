---
import GithubSlugger from 'github-slugger';
import { env } from '@w0s/env-value-type';
import Layout from '@layouts/Admin.astro';
import FormGrid from '@components/FormGrid.astro';
import FormButtons from '@components/FormButtons.astro';
import FormGridGroup from '@components/FormGridGroup.astro';
import FormValidateMsg from '@components/FormValidateMsg.astro';
import Section from '@components/Section.astro';
import Table from '@components/Table.astro';
import SubmitButton from '@components/+phrasing/SubmitButton.astro';
import FormCtrlInput from '@components/+phrasing/FormCtrlInput.astro';
import FormCtrlSelect from '@components/+phrasing/FormCtrlSelect.astro';
import FormLabelIcon from '@components/+phrasing/FormLabelIcon.astro';
import Label from '@components/+phrasing/Label.astro';
import configCrawlerNews from '@config/crawler-news.js';
import configSqlite from '@config/sqlite.js';
import CrawlerNewsDao from '@dao/CrawlerNewsDao.js';
import { response303 } from '@util/httpResponse.js';
import { getParams as getRequestParams, string as requestString, stringEmpty as requestStringEmpty, number as requestNumber, boolean as requestBoolean } from '@util/request.js';
import { init as ssrInit } from '@util/ssr.js';
import type { StructuredData } from '@type/types.js';

interface RequestQuery {
	url: string | undefined;
	title: string | undefined;
	category: number | undefined;
	priority: number | undefined;
	browser: boolean;
	selectorWrap: string | undefined;
	selectorDate: string | undefined;
	selectorContent: string | undefined;
	baseUrl: string | undefined;
	actionAdd: boolean;
	actionRevise: boolean;
	actionRevisePreview: boolean;
	actionDelete: boolean;
}

export const prerender = false;
const { logger } = ssrInit(Astro, { dev: import.meta.env.DEV });

const structuredData: StructuredData = {
	title: 'ウェブ巡回（ニュース）',
};

const slugger = new GithubSlugger();

const requestParams = getRequestParams(Astro.url);
const requestBody = Astro.request.method === 'POST' ? await Astro.request.formData() : undefined;

const requestQuery: RequestQuery = {
	url: requestString(requestParams.get('url') ?? requestBody?.get('url')),
	title: requestString(requestBody?.get('title')),
	category: requestNumber(requestBody?.get('category')),
	priority: requestNumber(requestBody?.get('priority')),
	browser: requestBoolean(requestBody?.get('browser')),
	selectorWrap: requestString(requestBody?.get('selectorwrap')),
	selectorDate: requestStringEmpty(requestBody?.get('selectordate')),
	selectorContent: requestStringEmpty(requestBody?.get('selectorcontent')),
	baseUrl: requestString(requestBody?.get('baseurl')),
	actionAdd: requestBoolean(requestBody?.get('actionadd')),
	actionRevise: requestBoolean(requestBody?.get('actionrev')),
	actionRevisePreview: requestBoolean(requestParams.get('actionrevpre')),
	actionDelete: requestBoolean(requestBody?.get('actiondel')),
};

const dao = new CrawlerNewsDao(env('SQLITE_CRAWLER'));

const validateMessages: string[] = [];
if (requestQuery.actionAdd) {
	/* 登録 */
	if (requestQuery.url !== undefined && requestQuery.title !== undefined && requestQuery.category !== undefined && requestQuery.priority !== undefined && requestQuery.selectorWrap !== undefined) {
		try {
			await dao.insert({
				url: requestQuery.url,
				title: requestQuery.title,
				category: requestQuery.category,
				priority: requestQuery.priority,
				browser: requestQuery.browser,
				selectorWrap: requestQuery.selectorWrap,
				selectorDate: requestQuery.selectorDate,
				selectorContent: requestQuery.selectorContent,
			});
			logger.info('データ登録', requestQuery.url);

			return response303(Astro.request);
		} catch (e) {
			if (!(e instanceof Error)) {
				throw e;
			}

			// @ts-expect-error: ts(2339)
			switch (e.errno) {
				case configSqlite.errno.uniqueConstraint: {
					validateMessages.push(configCrawlerNews.validator.unique);
					break;
				}
				default: {
					throw e;
				}
			}
		}
	}
} else if (requestQuery.actionRevise) {
	/* 修正実行 */
	if (requestQuery.url !== undefined && requestQuery.title !== undefined && requestQuery.category !== undefined && requestQuery.priority !== undefined && requestQuery.selectorWrap !== undefined && requestQuery.baseUrl !== undefined) {
		await dao.update({
			url: requestQuery.url,
			title: requestQuery.title,
			category: requestQuery.category,
			priority: requestQuery.priority,
			browser: requestQuery.browser,
			selectorWrap: requestQuery.selectorWrap,
			selectorDate: requestQuery.selectorDate,
			selectorContent: requestQuery.selectorContent,
			baseUrl: requestQuery.baseUrl,
		});
		logger.info('データ更新', requestQuery.url);

		return response303(Astro.request);
	}
} else if (requestQuery.actionDelete) {
	/* 削除 */
	if (requestQuery.url !== undefined) {
		await dao.delete(requestQuery.url);
		logger.info('データ削除', requestQuery.url);

		return response303(Astro.request);
	}
} else if (requestQuery.actionRevisePreview) {
	/* 修正データ選択 */
	if (requestQuery.url !== undefined) {
		const reviseData = await dao.getReviseData(requestQuery.url);
		if (reviseData !== undefined) {
			requestQuery.title = reviseData.title;
			requestQuery.category = reviseData.category;
			requestQuery.priority = reviseData.priority;
			requestQuery.browser = reviseData.browser;
			requestQuery.selectorWrap = reviseData.selectorWrap;
			requestQuery.selectorDate = reviseData.selectorDate;
			requestQuery.selectorContent = reviseData.selectorVontent;
		}
	}
}

/* 初期表示 */
const [categoryMaster, priorityMaster, newsPageListDto] = await Promise.all([
	dao.getCategoryMaster(), // カテゴリー情報
	dao.getPriorityMaster(), // 優先度情報
	dao.getNewsPageList(), // 巡回ページデータ
]);

const newsPageList: Map<
	string,
	{
		url: string;
		title: string;
		priority: string;
		browser: boolean;
		selectorWrap: string;
		selectorDate: string | undefined;
		selectorContent: string | undefined;
	}[]
> = new Map();
for (const newsPage of newsPageListDto) {
	const categoryName = newsPage.category;

	const newsPageOfCategoryView = newsPageList.get(categoryName) ?? [];
	newsPageOfCategoryView.push({
		url: newsPage.url,
		title: newsPage.title,
		priority: newsPage.priority,
		browser: newsPage.browser,
		selectorWrap: newsPage.selectorWrap,
		selectorDate: newsPage.selectorDate,
		selectorContent: newsPage.selectorContent,
	});

	newsPageList.set(categoryName, newsPageOfCategoryView);
}
---

<Layout astroFilePath={Astro.self.moduleId} structuredData={structuredData}>
	<Section slugger={slugger}>
		<Fragment slot="heading">データ登録</Fragment>

		<form action={Astro.url.pathname} method="post">
			<FormValidateMsg msgs={validateMessages} />

			<FormGrid>
				<FormGridGroup>
					<Fragment slot="legend"><label for="fc-url">URL <FormLabelIcon type="required">必須</FormLabelIcon></label></Fragment>

					<Fragment slot="contents">
						<FormCtrlInput><input type="url" name="url" value={requestQuery.url} required="" class="js-convert-trim" id="fc-url" /></FormCtrlInput>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup>
					<Fragment slot="legend"><label for="fc-title">タイトル <FormLabelIcon type="required">必須</FormLabelIcon></label></Fragment>

					<Fragment slot="contents">
						<FormCtrlInput><input name="title" value={requestQuery.title} required="" class="js-convert-trim" id="fc-title" /></FormCtrlInput>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup>
					<Fragment slot="legend"><label for="fc-category">カテゴリー <FormLabelIcon type="required">必須</FormLabelIcon></label></Fragment>

					<Fragment slot="contents">
						<FormCtrlSelect>
							<select name="category" id="fc-category">
								{
									categoryMaster.map((category) => (
										<>
											{requestQuery.category === category.fk && (
												<option value={category.fk} selected="">
													{category.name}
												</option>
											)}
											{requestQuery.category !== category.fk && <option value={category.fk}>{category.name}</option>}
										</>
									))
								}
							</select>
						</FormCtrlSelect>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup>
					<Fragment slot="legend"><label for="fc-priority">優先度 <FormLabelIcon type="required">必須</FormLabelIcon></label></Fragment>

					<Fragment slot="contents">
						<FormCtrlSelect>
							<select name="priority" id="fc-priority">
								{
									priorityMaster.map((priority) => (
										<>
											{requestQuery.priority === priority.fk && (
												<option value={priority.fk} selected="">
													{priority.name}
												</option>
											)}
											{requestQuery.priority !== priority.fk && <option value={priority.fk}>{priority.name}</option>}
										</>
									))
								}
							</select>
						</FormCtrlSelect>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup>
					<Fragment slot="legend">ブラウザ</Fragment>

					<Fragment slot="contents">
						<Label label="ウェブブラウザでアクセスするか">
							<input type="checkbox" name="browser" value="1" checked={requestQuery.browser} />
						</Label>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup>
					<Fragment slot="legend"><label for="fc-selectorwrap">セレクター（包括） <FormLabelIcon type="required">必須</FormLabelIcon></label></Fragment>

					<Fragment slot="contents">
						<FormCtrlInput><input name="selectorwrap" value={requestQuery.selectorWrap} required="" class="js-convert-trim" id="fc-selectorwrap" /></FormCtrlInput>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup>
					<Fragment slot="legend"><label for="fc-selectordate">セレクター（日付） <FormLabelIcon type="optional">任意</FormLabelIcon></label></Fragment>

					<Fragment slot="contents">
						<FormCtrlInput><input name="selectordate" value={requestQuery.selectorDate} class="js-convert-trim" id="fc-selectordate" /></FormCtrlInput>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup>
					<Fragment slot="legend"><label for="fc-selectorcontent">セレクター（内容） <FormLabelIcon type="optional">任意</FormLabelIcon></label></Fragment>

					<Fragment slot="contents">
						<FormCtrlInput><input name="selectorcontent" value={requestQuery.selectorContent} class="js-convert-trim" id="fc-selectorcontent" /></FormCtrlInput>
					</Fragment>
				</FormGridGroup>
			</FormGrid>

			<p><input type="hidden" name="baseurl" value={requestQuery.url} /></p>

			<FormButtons>
				{
					(requestQuery.actionRevisePreview || requestQuery.actionRevise) && (
						<p>
							<SubmitButton name="actionrev" value="1">
								修正
							</SubmitButton>
						</p>
					)
				}
				{
					!requestQuery.actionRevisePreview && !requestQuery.actionRevise && (
						<p>
							<SubmitButton name="actionadd" value="1">
								登録
							</SubmitButton>
						</p>
					)
				}
			</FormButtons>
		</form>
	</Section>

	{
		[...newsPageList].map(([categoryName, newsPageOfCategory]) => (
			<Section slugger={slugger}>
				<Fragment slot="heading">{categoryName}</Fragment>

				<Table scroll={true}>
					<thead>
						<tr>
							<td />
							<th scope="col">対象ページ</th>
							<th scope="col">優先</th>
							<th scope="col">🌐</th>
							<th scope="col">包括セレクター</th>
							<th scope="col">日付セレクター</th>
							<th scope="col">内容セレクター</th>
						</tr>
					</thead>
					<tbody>
						{newsPageOfCategory.map((newsPage) => (
							<tr>
								<td class="u-cell -wrap-no">
									<form action={Astro.url.pathname} method="post">
										<p>
											<SubmitButton style="compact" name="actionrevpre" value="1" formmethod="get">
												修正
											</SubmitButton>
											<SubmitButton style="compact" name="actiondel" value="1" class="js-button-confirm" data-message="削除しますか?">
												削除
											</SubmitButton>
										</p>
										<p>
											<input type="hidden" name="url" value={newsPage.url} />
										</p>
									</form>
								</td>
								<td>
									<a href={`/admin/crawler-news/data?url=${newsPage.url}`}>{newsPage.title}</a>
									<p style="margin-block-start: 0.5em; font-size: 80%">
										<a href={newsPage.url} referrerpolicy="no-referrer">
											{newsPage.url}
										</a>
									</p>
								</td>
								<td>{newsPage.priority}</td>
								<td>{newsPage.browser && <>✔</>}</td>
								<td class="u-cell -wrap-anywhere">{newsPage.selectorWrap}</td>
								<td class="u-cell -wrap-anywhere">{newsPage.selectorDate}</td>
								<td class="u-cell -wrap-anywhere">{newsPage.selectorContent}</td>
							</tr>
						))}
					</tbody>
				</Table>
			</Section>
		))
	}
</Layout>
