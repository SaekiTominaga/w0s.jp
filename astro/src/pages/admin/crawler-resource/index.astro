---
import GithubSlugger from 'github-slugger';
import Layout from '@layouts/Admin.astro';
import Section from '@components/Section.astro';
import CrawlerResourceDao from '@dao/CrawlerResourceDao.js';
import { env } from '@util/env.js';
import { response303 } from '@util/httpResponse.js';
import RequestUtil from '@util/Request.js';
import { init as ssrInit } from '@util/ssr.js';
import type { StructuredData } from '@type/types.js';

interface RequestQuery {
	url: string | null;
	title: string | null;
	category: number | null;
	priority: number | null;
	browser: boolean;
	selector: string | null;
	action_add: boolean;
	action_revise: boolean;
	action_revise_preview: boolean;
	action_delete: boolean;
}

export const prerender = false;
const { logger } = ssrInit(Astro, { dev: import.meta.env.DEV });

const structuredData: StructuredData = {
	title: 'ウェブ巡回（リソース）',
};

const slugger = new GithubSlugger();

const requestParams = RequestUtil.getParams(Astro.url);
const requestBody = Astro.request.method === 'POST' ? await Astro.request.formData() : undefined;

const requestQuery: RequestQuery = {
	url: RequestUtil.string(requestParams.get('url') ?? requestBody?.get('url')),
	title: RequestUtil.string(requestBody?.get('title')),
	category: RequestUtil.number(requestBody?.get('category')),
	priority: RequestUtil.number(requestBody?.get('priority')),
	browser: RequestUtil.boolean(requestBody?.get('browser')),
	selector: RequestUtil.string(requestBody?.get('selector')),
	action_add: RequestUtil.boolean(requestBody?.get('actionadd')),
	action_revise: RequestUtil.boolean(requestBody?.get('actionrev')),
	action_revise_preview: RequestUtil.boolean(requestParams.get('actionrevpre')),
	action_delete: RequestUtil.boolean(requestBody?.get('actiondel')),
};

const dao = new CrawlerResourceDao(env('SQLITE_CRAWLER'));

if (requestQuery.action_add) {
	/* 登録 */
	if (requestQuery.url !== null && requestQuery.title !== null && requestQuery.category !== null && requestQuery.priority !== null) {
		await dao.insert(requestQuery.url, requestQuery.title, requestQuery.category, requestQuery.priority, requestQuery.browser, requestQuery.selector);
		logger.info('データ登録', requestQuery.url);

		return response303(Astro.request);
	}
} else if (requestQuery.action_revise) {
	/* 修正実行 */
	if (requestQuery.url !== null && requestQuery.title !== null && requestQuery.category !== null && requestQuery.priority !== null) {
		await dao.update(requestQuery.url, requestQuery.title, requestQuery.category, requestQuery.priority, requestQuery.browser, requestQuery.selector);
		logger.info('データ更新', requestQuery.url);

		return response303(Astro.request);
	}
} else if (requestQuery.action_delete) {
	/* 削除 */
	if (requestQuery.url !== null) {
		await dao.delete(requestQuery.url);
		logger.info('データ削除', requestQuery.url);
	}

	return response303(Astro.request);
} else if (requestQuery.action_revise_preview) {
	/* 修正データ選択 */
	if (requestQuery.url !== null) {
		const reviseData = await dao.getReviseData(requestQuery.url);
		if (reviseData !== null) {
			requestQuery.title = reviseData.title;
			requestQuery.category = reviseData.category;
			requestQuery.priority = reviseData.priority;
			requestQuery.browser = reviseData.browser;
			requestQuery.selector = reviseData.selector;
		}
	}
}

/* 初期表示 */
const categoryMaster = await dao.getCategoryMaster(); // カテゴリー情報
const priorityMaster = await dao.getPriorityMaster(); // 優先度情報
const resourcePageListDto = await dao.getResourcePageList(); // 巡回ページデータ

const resourcePageList = new Map<
	string,
	{
		url: URL;
		title: string;
		priority: string;
		browser: boolean;
		selector: string | null;
		content_hash: string;
		error: boolean;
	}[]
>();
for (const resoursePage of resourcePageListDto) {
	const categoryName = resoursePage.category;

	const resourcePageOfCategoryView = resourcePageList.get(categoryName) ?? [];
	resourcePageOfCategoryView.push({
		url: new URL(resoursePage.url),
		title: resoursePage.title,
		priority: resoursePage.priority,
		browser: resoursePage.browser,
		selector: resoursePage.selector,
		content_hash: resoursePage.content_hash,
		error: resoursePage.error,
	});

	resourcePageList.set(categoryName, resourcePageOfCategoryView);
}
---

<Layout astroFilePath={Astro.self.moduleId} structuredData={structuredData}>
	<Section slugger={slugger}>
		<Fragment slot="heading">データ登録</Fragment>

		<form action={Astro.url.pathname} method="post" class="c-stack">
			<div class="p-form-grid">
				<div class="p-form-grid__group">
					<fieldset>
						<legend class="p-form-grid__legend">
							<label for="fc-url" class="c-label">URL <strong class="c-label-icon -required">必須</strong></label>
						</legend>
						<div class="p-form-grid__contents">
							<div class="c-form-controls">
								<input type="url" class="c-input -full js-convert-trim" id="fc-url" name="url" value={requestQuery.url} required="" readonly={requestQuery.action_revise_preview || requestQuery.action_revise} />
							</div>
						</div>
					</fieldset>
				</div>
				<div class="p-form-grid__group">
					<fieldset>
						<legend class="p-form-grid__legend">
							<label for="fc-title" class="c-label">タイトル <strong class="c-label-icon -required">必須</strong></label>
						</legend>
						<div class="p-form-grid__contents">
							<div class="c-form-controls">
								<input class="c-input -full js-convert-trim" id="fc-title" name="title" value={requestQuery.title} required="" />
							</div>
						</div>
					</fieldset>
				</div>
				<div class="p-form-grid__group">
					<fieldset>
						<legend class="p-form-grid__legend">
							<label for="fc-category" class="c-label">カテゴリー <strong class="c-label-icon -required">必須</strong></label>
						</legend>
						<div class="p-form-grid__contents">
							<div class="c-form-controls">
								<select class="c-select" id="fc-category" name="category">
									{
										categoryMaster.map((category) => (
											<>
												{requestQuery.category === category.fk && (
													<option value={category.fk} selected="">
														{category.name}
													</option>
												)}
												{requestQuery.category !== category.fk && <option value={category.fk}>{category.name}</option>}
											</>
										))
									}
								</select>
							</div>
						</div>
					</fieldset>
				</div>
				<div class="p-form-grid__group">
					<fieldset>
						<legend class="p-form-grid__legend">
							<label for="fc-priority" class="c-label">優先度 <strong class="c-label-icon -required">必須</strong></label>
						</legend>
						<div class="p-form-grid__contents">
							<div class="c-form-controls">
								<select class="c-select" id="fc-priority" name="priority">
									{
										priorityMaster.map((priority) => (
											<>
												{requestQuery.priority === priority.fk && (
													<option value={priority.fk} selected="">
														{priority.name}
													</option>
												)}
												{requestQuery.priority !== priority.fk && <option value={priority.fk}>{priority.name}</option>}
											</>
										))
									}
								</select>
							</div>
						</div>
					</fieldset>
				</div>
				<div class="p-form-grid__group">
					<fieldset>
						<legend class="p-form-grid__legend">ブラウザ</legend>
						<div class="p-form-grid__contents">
							<div class="c-form-controls">
								<label class="c-label -check">
									<input type="checkbox" name="browser" value="1" checked={requestQuery.browser} />
									<span class="c-label__text">ウェブブラウザでアクセスするか</span></label
								>
							</div>
						</div>
					</fieldset>
				</div>
				<div class="p-form-grid__group">
					<fieldset>
						<legend class="p-form-grid__legend">
							<label for="fc-selector" class="c-label">セレクター <strong class="c-label-icon -optional">任意</strong></label>
						</legend>
						<div class="p-form-grid__contents">
							<div class="c-form-controls">
								<input class="c-input -full js-convert-trim" id="fc-selector" name="selector" value={requestQuery.selector} />
							</div>
						</div>
					</fieldset>
				</div>
			</div>

			<div class="c-form-controls -submit">
				{
					(requestQuery.action_revise_preview || requestQuery.action_revise) && (
						<p>
							<button class="c-submit" name="actionrev" value="1">
								修正
							</button>
						</p>
					)
				}
				{
					!requestQuery.action_revise_preview && !requestQuery.action_revise && (
						<p>
							<button class="c-submit" name="actionadd" value="1">
								登録
							</button>
						</p>
					)
				}
			</div>
		</form>
	</Section>

	{
		[...resourcePageList].map(([categoryName, resourcePageOfCategory]) => (
			<Section slugger={slugger}>
				<Fragment slot="heading">{categoryName}</Fragment>

				<div class="p-table -scroll">
					<table>
						<thead>
							<tr>
								<td />
								<th scope="col">対象ページ</th>
								<th scope="col">優先</th>
								<th scope="col">🌐</th>
								<th scope="col">セレクター</th>
								<th scope="col">ハッシュ値</th>
								<th scope="col">エラー</th>
							</tr>
						</thead>
						<tbody>
							{resourcePageOfCategory.map((resourcePage) => (
								<tr>
									<td class="u-cell -wrap-no">
										<form action={Astro.url.pathname} method="post" class="c-stack">
											<p>
												<input type="hidden" name="url" value={resourcePage.url.toString()} />
												<button name="actionrevpre" value="1" formmethod="get" class="c-submit -compact">
													修正
												</button>
												<button name="actiondel" value="1" class="c-submit -compact js-button-confirm" data-message="削除しますか?">
													削除
												</button>
											</p>

											<p>
												<a href={`/admin/crawler-resource/diff?dir=${resourcePage.url.hostname}${encodeURIComponent(resourcePage.url.pathname.replace(/\/[^/]*$/g, ''))}`}>差分チェック</a>
											</p>
										</form>
									</td>
									<td>
										<a href={resourcePage.url} referrerpolicy="no-referrer">
											{resourcePage.title}
										</a>
										<p style="margin-block-start: 0.5em; font-size: 80%">{resourcePage.url}</p>
									</td>
									<td class="u-cell -center">{resourcePage.priority}</td>
									<td class="u-cell -center">{resourcePage.browser && <>✔</>}</td>
									<td class="u-cell -wrap-anywhere">{resourcePage.selector}</td>
									<td>{resourcePage.content_hash}</td>
									<td class="u-cell -center">{resourcePage.error && <strong style="color: red">✗</strong>}</td>
								</tr>
							))}
						</tbody>
					</table>
				</div>
			</Section>
		))
	}
</Layout>
