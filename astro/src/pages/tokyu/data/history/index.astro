---
import dayjs from 'dayjs';
import GithubSlugger from 'github-slugger';
import Layout from '@layouts/Tokyu.astro';
import Box from '@components/Box.astro';
import FormGrid from '@components/FormGrid.astro';
import FormButtons from '@components/FormButtons.astro';
import FormInvalid from '@components/FormInvalid.astro';
import FormGridGroup from '@components/FormGridGroup.astro';
import List from '@components/List.astro';
import Section from '@components/Section.astro';
import Toggle from '@components/Toggle.astro';
import Button from '@components/+phrasing/Button.astro';
import FormCtrlInput from '@components/+phrasing/FormCtrlInput.astro';
import Label from '@components/+phrasing/Label.astro';
import SubmitButton from '@components/+phrasing/SubmitButton.astro';
import HistoryTable from '@components/tokyu/HistoryTable.astro';
import TokyuCarHistoryDao from '@dao/TokyuCarHistoryDao.js';
import { env } from '@util/env.js';
import RequestUtil from '@util/Request.js';
import { init as ssrInit } from '@util/ssr.js';
import type { StructuredData } from '@type/types.js';

interface RequestQuery {
	number: string | null;
	number_old: boolean;
	series: string[] | null;
	register_start: string | null;
	register_end: string | null;
	sort: string | null;
	era: string | null;
	output: string | null;
}

interface ViewChange {
	number: string;
	sign: string;
	date: string;
}

interface ViewCar {
	number: string;
	sign: string;
	series: string;
	type: string;
	annual: string;
	register: string;
	changes: ViewChange[];
	renewal: string;
	age: number;
	scrap: boolean;
	transfer: string | null;
}

export const prerender = false;

const structuredData: StructuredData = {
	title: '東急電車　車歴表',
	heading: '車歴表',
	description: '旧7000系から新3000系までの入籍日、改造履歴などを検索できるシステムです。',
	dateModified: dayjs('2010-03-31'),
	breadcrumb: [
		{ path: '/tokyu/', name: '東急電車資料室' },
		{ path: '/tokyu/data/', name: '車両データ' },
	],
	moduleScripts: ['tokyu-car-history.mjs'],
	opensearch: { path: '/tokyu/data/history/search', name: '東急電車　車歴検索' },
};

ssrInit(Astro, { dev: import.meta.env.DEV });

const slugger = new GithubSlugger();

const requestParams = RequestUtil.getParams(Astro.url);

const requestQuery: RequestQuery = {
	number: RequestUtil.string(requestParams.get('num')),
	number_old: RequestUtil.boolean(requestParams.get('old')),
	series: RequestUtil.strings(requestParams.getAll('ser[]')),
	register_start: RequestUtil.string(requestParams.get('res')),
	register_end: RequestUtil.string(requestParams.get('ree')),
	sort: RequestUtil.string(requestParams.get('srt')),
	era: RequestUtil.string(requestParams.get('era')),
	output: RequestUtil.string(requestParams.get('out')),
};

const dao = new TokyuCarHistoryDao(env('SQLITE_TOKYU_CAR_HISTORY'));

const carSeries = await dao.getCarSeries();

/**
 * 日付データを表示用に整形する
 *
 * @param date - 日付データ
 *
 * @returns 整形後の日付データ
 */
const dateFormat = (date: Date): string => {
	switch (requestQuery.era) {
		case 'ja':
			return date.toLocaleDateString('ja-JP-u-ca-japanese', { dateStyle: 'short' }).replaceAll('/', '.');
		default:
	}

	return dayjs(date).format('YYYY-MM-DD');
};

const cars: ViewCar[][] = [];
let searchCount = 0; // 検索条件にマッチした車両数

if (requestQuery.output !== null) {
	const carsDto = await dao.getCarData(requestQuery.number?.replaceAll('.', '_').replaceAll('*', '%') ?? null, requestQuery.number_old, requestQuery.series, requestQuery.register_start, requestQuery.register_end, requestQuery.sort);

	searchCount = carsDto.length;

	let beforeSeries = '';
	for (const car of carsDto) {
		const changes: ViewChange[] = [];
		if (car.change !== null) {
			for (const change of car.change) {
				changes.push({
					number: change.number,
					sign: change.sign,
					date: dateFormat(change.date),
				});
			}
		}

		const searchCarView: ViewCar = {
			number: car.number,
			sign: car.sign,
			series: car.series,
			type: car.type,
			annual: car.annual,
			register: dateFormat(car.register),
			changes: changes,
			renewal: car.renewal,
			age: dayjs().diff(dayjs(car.register), 'y'), // https://day.js.org/docs/en/display/difference
			scrap: car.scrap,
			transfer: car.transfer,
		};

		if (cars.length === 0 || car.series !== beforeSeries) {
			cars.push([searchCarView]);
		} else {
			cars[cars.length - 1]?.push(searchCarView);
		}

		beforeSeries = car.series;
	}
}
---

<Layout astroFilePath={Astro.self.moduleId} structuredData={structuredData} toc={false}>
	<Toggle open={requestQuery.output === null}>
		<Fragment slot="summary">説明文</Fragment>

		<Box>
			<List>
				<li>旧7000系〜新3000系、300系までの車両が登録されています。新5000系以降は検索できません。</li>
				<li>全車両を見る場合は<q>車号</q>を未入力かつ<q>車種</q>を未選択の状態で検索してください。</li>
				<li>
					<q>車号</q>では次に挙げる記号を使うことで特殊な検索ができます。
					<ul>
						<li>「<kbd>.</kbd>」（ピリオド）は任意の1文字に相当します。</li>
						<li>「<kbd>*</kbd>」（アスタリスク）は任意数（0文字含む）の連続した文字列に相当します。</li>
						<li>たとえばデハ8700形の全車両を表示するには、車種の<q>8500系</q>にチェックを入れたうえで、車号に『<kbd>.7..</kbd>』または『<kbd>.7*</kbd>』と入力します。</li>
					</ul>
				</li>
				<li>改造によって車種に変更が生じた車両では、改造前後の紐付けができません。たとえば車号に『<kbd>7001</kbd>』と入力し、<q>旧車号を含む</q>にチェックを入れて検索しても、7700系化後のデータはヒットしません。</li>
				<li>入籍日、改番日の参考資料は<a href="/tokyu/data/history/ref">出典一覧</a>に記しています。</li>
			</List>
		</Box>
	</Toggle>

	<Section slugger={slugger}>
		<Fragment slot="heading">検索条件入力</Fragment>

		<form>
			<FormGrid complex={true}>
				<FormGridGroup>
					<Fragment slot="legend"><label for="fc-num">車号</label></Fragment>

					<Fragment slot="contents">
						<FormCtrlInput size="4em"><input name="num" value={requestQuery.number} maxlength={4} pattern="[0-37-9０-３７-９yYｙＹ\.．\*＊][0-9０-９\.．\*＊]{0,2}[0-9０-９aAａＡbBｂＢ\.．\*＊]?" id="fc-num" aria-errormessage="input-validate-num" class="js-convert-tokyu-car-histroy-num js-validation" title="検索対象の車種は旧7000系から新3000系までです。" /></FormCtrlInput>

						<Label label="旧車号を含む">
							<input type="checkbox" name="old" value="1" checked={requestQuery.number_old} />
						</Label>
					</Fragment>

					<Fragment slot="validate">
						<FormInvalid id="input-validate-num" />
					</Fragment>
				</FormGridGroup>
				<FormGridGroup ctrlType="checkbox">
					<Fragment slot="legend">車種</Fragment>

					<Fragment slot="contents">
						{
							carSeries.map((car) => (
								<Label label={car.series}>
									<input type="checkbox" name="ser[]" value={car.id} checked={requestQuery.series !== null && requestQuery.series.includes(car.id)} />
								</Label>
							))
						}
						<p>
							<Button class="js-button-checkboxes" data-course="check" data-controls-name="ser[]">全車種を選択</Button>
							<Button class="js-button-checkboxes" data-course="uncheck" data-controls-name="ser[]">すべての選択を解除</Button>
						</p>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup>
					<Fragment slot="legend">入籍日</Fragment>

					<Fragment slot="contents">
						<Label label="開始日">
							<FormCtrlInput size="10em"><input type="date" name="res" value={requestQuery.register_start} min="1962-01-25" max="2001-03-24" class="js-validation js-input-date-to-text" aria-errormessage="input-validate-registarstart" title="「開始日」は YYYY-MM-DD 形式で入力してください。" data-validation-noexist="「開始日」が存在しない日付です。" data-validation-min="「開始日」は1962年1月25日以降を入力してください。旧7000系〜新3000系、300系でそれ以前に入籍した車両は存在しません。" data-validation-max="「開始日」は2001年3月24日以前を入力してください。旧7000系〜新3000系、300系でそれ以降に入籍した車両は存在しません。" /></FormCtrlInput>
						</Label>
						<Label label="終了日">
							<FormCtrlInput size="10em"><input type="date" name="ree" value={requestQuery.register_end} min="1962-01-25" max="2001-03-24" style="--inline-size: 8em" class="js-validation js-input-date-to-text" aria-errormessage="input-validate-registarend" title="「終了日」は YYYY-MM-DD 形式で入力してください。" data-validation-noexist="「終了日」が存在しない日付です。" data-validation-min="「終了日」は1962年1月25日以降を入力してください。旧7000系〜新3000系、300系でそれ以前に入籍した車両は存在しません。" data-validation-max="「終了日」は2001年3月24日以前を入力してください。旧7000系〜新3000系、300系でそれ以降に入籍した車両は存在しません。" /></FormCtrlInput>
						</Label>
					</Fragment>

					<Fragment slot="validate">
						<FormInvalid id="input-validate-registarstart" />

						<FormInvalid id="input-validate-registarend" />
					</Fragment>
				</FormGridGroup>
				<FormGridGroup ctrlType="radio">
					<Fragment slot="legend"><span id="label-sort">ソート</span></Fragment>

					<Fragment slot="contents">
						<div role="radiogroup" aria-labelledby="label-sort">
							{
								[
									['snu', '車号（車種別）'],
									['num', '車号（車種混合）'],
									['typ', '形式'],
									['ann', '呼称'],
									['reg', '入籍日'],
								].map(([name, value], index) => (
									<Label label={value}>
										<input type="radio" name="srt" value={name} checked={((requestQuery.sort === null || requestQuery.sort === '') && index === 0) || requestQuery.sort === name} />
									</Label>
								))
							}
						</div>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup ctrlType="radio">
					<Fragment slot="legend"><span id="label-era">年表記</span></Fragment>

					<Fragment slot="contents">
						<div role="radiogroup" aria-labelledby="label-era">
							{
								[
									['ad', '西暦'],
									['ja', '和暦'],
								].map(([name, value], index) => (
									<Label label={value}>
										<input type="radio" name="era" value={name} checked={((requestQuery.era === null || requestQuery.era === '') && index === 0) || requestQuery.era === name} />
									</Label>
								))
							}
						</div>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup ctrlType="radio">
					<Fragment slot="legend"><span id="label-output">出力</span></Fragment>

					<Fragment slot="contents">
						<div role="radiogroup" aria-labelledby="label-output">
							{
								[
									['nor', '全列表示'],
									['mob', '主要列表示（モバイル向け）'],
								].map(([name, value], index) => (
									<Label label={value}>
										<input type="radio" name="out" value={name} checked={((requestQuery.output === null || requestQuery.output === '') && index === 0) || requestQuery.output === name} />
									</Label>
								))
							}
						</div>
					</Fragment>
				</FormGridGroup>
			</FormGrid>

			<FormButtons>
				<p><SubmitButton>検索</SubmitButton></p>
			</FormButtons>
		</form>
	</Section>

	{
		requestQuery.output !== null && (
			<Section slugger={slugger} class="js-autofocus">
				<Fragment slot="heading">検索結果</Fragment>

				{searchCount >= 1 && (
					<>
						<p>{searchCount}件ヒットしました。</p>

						{searchCount >= 2 && (
							<p>
								<Label label="直上と同じ内容のセルを「〃」で表示">
									<w0s-input-switch checked="" storage-key="tokyu-history-ditto" class="js-button-ditto" data-ditto-for="result-table" />
								</Label>
							</p>
						)}

						<HistoryTable class="js-result-table" id="result-table">
							{requestQuery.output !== 'mob' && (
								<>
									<thead>
										<tr>
											<th scope="col">車号</th>
											<th scope="col">車種</th>
											<th scope="col">形式</th>
											<th scope="col">呼称</th>
											<th scope="col">入籍日</th>
											<th scope="col">旧車号</th>
											<th scope="col">改番日</th>
											<th scope="col">更新</th>
											<th scope="col">新車号、譲渡車号</th>
											<th scope="col">車齢</th>
										</tr>
									</thead>
									{cars.map((carOfSeries) => (
										<tbody>
											{carOfSeries.map((car) => (
												<>
													{car.changes.length <= 1 && (
														<tr>
															{/* prettier-ignore */}
															<td class="u-cell -center">{car.sign}{car.number}</td>
															<td class="u-cell -center">{car.series}</td>
															<td class="u-cell -center">{car.type}</td>
															<td class="u-cell -center">{car.annual}</td>
															<td class="u-cell -center">{car.register}</td>
															{car.changes.length === 0 && (
																<>
																	<td />
																	<td />
																</>
															)}
															{car.changes.length >= 1 && (
																<>
																	{/* prettier-ignore */}
																	<td class="u-cell -center">{car.changes[0].sign}{car.changes[0].number}</td>
																	<td class="u-cell -center">{car.changes[0].date}</td>
																</>
															)}
															<td>{car.renewal}</td>
															<td>{car.transfer}</td>
															{/* prettier-ignore */}
															<td class="u-cell -center">{car.scrap && <>解体</>}{!car.scrap && <>{car.age}年</>}</td>
														</tr>
													)}

													{car.changes.length >= 2 && (
														<>
															{car.changes.map((change, index) => (
																<>
																	{index === 0 && (
																		<tr>
																			{/* prettier-ignore */}
																			<td rowspan={car.changes.length} class="u-cell -center">{car.sign}{car.number}</td>
																			{/* prettier-ignore */}
																			<td rowspan={car.changes.length} class="u-cell -center">{car.series}</td>
																			{/* prettier-ignore */}
																			<td rowspan={car.changes.length} class="u-cell -center">{car.type}</td>
																			{/* prettier-ignore */}
																			<td rowspan={car.changes.length} class="u-cell -center">{car.annual}</td>
																			{/* prettier-ignore */}
																			<td rowspan={car.changes.length} class="u-cell -center">{car.register}</td>
																			{/* prettier-ignore */}
																			<td class="u-cell -center">{change.sign}{change.number}</td>
																			<td class="u-cell -center">{change.date}</td>
																			{/* prettier-ignore */}
																			<td rowspan={car.changes.length} class="u-cell -center">{car.renewal}</td>
																			{/* prettier-ignore */}
																			<td rowspan={car.changes.length} class="u-cell -center">{car.transfer}</td>
																			{/* prettier-ignore */}
																			<td rowspan={car.changes.length} class="u-cell -center">{car.scrap && <>解体</>}{!car.scrap && <>{car.age}年</>}</td>
																		</tr>
																	)}
																	{index >= 1 && (
																		<tr>
																			{/* prettier-ignore */}
																			<td class="u-cell -center">{change.sign}{change.number}</td>
																			<td class="u-cell -center">{change.date}</td>
																		</tr>
																	)}
																</>
															))}
														</>
													)}
												</>
											))}
										</tbody>
									))}
								</>
							)}
							{requestQuery.output === 'mob' && (
								<>
									<thead>
										<tr>
											<th scope="col">車号</th>
											<th scope="col">呼称</th>
											<th scope="col">入籍日</th>
											<th scope="col">旧車号</th>
										</tr>
									</thead>
									{cars.map((carOfSeries) => (
										<tbody>
											{carOfSeries.map((car) => (
												<>
													{car.changes.length <= 1 && (
														<tr>
															{/* prettier-ignore */}
															<td class="u-cell -center">{car.sign}{car.number}</td>
															<td class="u-cell -center">{car.annual}</td>
															<td class="u-cell -center">{car.register}</td>
															{car.changes.length === 0 && <td />}
															{car.changes.length >= 1 && (
																<>
																	{/* prettier-ignore */}
																	<td class="u-cell -center">{car.changes[0].sign}{car.changes[0].number}</td>
																</>
															)}
														</tr>
													)}

													{car.changes.length >= 2 && (
														<>
															{car.changes.map((change, index) => (
																<>
																	{index === 0 && (
																		<tr>
																			{/* prettier-ignore */}
																			<td rowspan={car.changes.length} class="u-cell -center">{car.sign}{car.number}</td>
																			{/* prettier-ignore */}
																			<td rowspan={car.changes.length} class="u-cell -center">{car.annual}</td>
																			{/* prettier-ignore */}
																			<td rowspan={car.changes.length} class="u-cell -center">{car.register}</td>
																			{/* prettier-ignore */}
																			<td class="u-cell -center">{change.sign}{change.number}</td>
																		</tr>
																	)}
																	{index >= 1 && (
																		<tr>
																			{/* prettier-ignore */}
																			<td class="u-cell -center">{car.sign}{car.number}</td>
																		</tr>
																	)}
																</>
															))}
														</>
													)}
												</>
											))}
										</tbody>
									))}
								</>
							)}
						</HistoryTable>
					</>
				)}

				{searchCount === 0 && (
					<Box>
						<p>
							<strong>該当する車両が存在しないか、登録されていません。</strong>
						</p>
					</Box>
				)}
			</Section>
		)
	}
</Layout>
