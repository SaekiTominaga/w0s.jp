---
import ejs from 'ejs';
import nodemailer from 'nodemailer';
import Layout from '@layouts/Site.astro';
import DialogOverlay from '@components/DialogOverlay.astro';
import FormGrid from '@components/FormGrid.astro';
import FormButtons from '@components/FormButtons.astro';
import FormInvalid from '@components/FormInvalid.astro';
import FormGridGroup from '@components/FormGridGroup.astro';
import Step from '@components/Step.astro';
import StepItem from '@components/StepItem.astro';
import Table from '@components/Table.astro';
import FormCtrlInput from '@components/+phrasing/FormCtrlInput.astro';
import FormCtrlTextarea from '@components/+phrasing/FormCtrlTextarea.astro';
import FormLabelIcon from '@components/+phrasing/FormLabelIcon.astro';
import SubmitButton from '@components/+phrasing/SubmitButton.astro';
import { response303, response400 } from '@util/httpResponse.js';
import { env } from '@util/env.js';
import RequestUtil from '@util/Request.js';
import { init as ssrInit } from '@util/ssr.js';
import type { StructuredData } from '@type/types.js';

interface RequestQuery {
	name: string | null;
	email: string | null;
	reply: string | null;
	body: string | null;
	referrer: string | null;
	action_send: boolean;
}

export const prerender = false;
const { logger } = ssrInit(Astro, { dev: import.meta.env.DEV });

const structuredData: StructuredData = {
	'schema-type': 'ContactPage',
	title: '問い合わせ',
	breadcrumb: [{ path: '/', name: 'ホーム' }],
	moduleScripts: ['contact.mjs'],
};

if (Astro.request.method === 'POST') {
	const requestBody = await Astro.request.formData();

	const requestQuery: RequestQuery = {
		name: RequestUtil.string(requestBody.get('yourname')),
		email: RequestUtil.string(requestBody.get('email')),
		reply: RequestUtil.string(requestBody.get('reply')),
		body: RequestUtil.string(requestBody.get('body')),
		referrer: RequestUtil.string(requestBody.get('referrer')),
		action_send: RequestUtil.boolean(requestBody.get('actionsend')),
	};

	if (requestQuery.action_send) {
		/* Origin ヘッダーのチェック（bot 阻止） */
		Astro.response.headers.append('Vary', 'Origin');

		const requestOrigin = Astro.request.headers.get('Origin');
		if (requestOrigin === null || !env('CONTACT_ALLOW_ORIGINS', 'string[]').includes(requestOrigin)) {
			logger.warn('Origin header error', requestOrigin);
			return response400();
		}

		/* メール送信 */
		const html = await ejs.renderFile('../astro/template/mail/contact.ejs', {
			requestQuery: requestQuery,
			ip: Astro.clientAddress,
			ua: Astro.request.headers.get('User-Agent'),
		});

		const transporter = nodemailer.createTransport({
			host: env('MAIL_SMTP'),
			port: env('MAIL_PORT', 'number'),
			auth: {
				user: env('MAIL_USER'),
				pass: env('MAIL_PASSWORD'),
			},
		});

		const info = await transporter.sendMail({
			from: env('MAIL_FROM'),
			to: env('MAIL_TO'),
			subject: 'w0s.jp 問い合わせ',
			html: html,
		});

		logger.info('Message sent: %s', info.messageId);

		return response303(Astro.request, `/contact_completed?referrer=${requestQuery.referrer}`);
	}
}

let referrerRootRelativePath = ''; // リファラーのいわゆるルート相対パス部分
const referrer = Astro.request.headers.get('Referer');
if (referrer !== null) {
	try {
		const referrerUrl = new URL(referrer);
		if (Astro.url.hostname === referrerUrl.hostname) {
			referrerRootRelativePath = `${referrerUrl.pathname}${referrerUrl.search}`;
		}
	} catch {
		logger.warn(`Invalid referrer value <${referrer}>`);
	}
}
---

<Layout astroFilePath={Astro.self.moduleId} structuredData={structuredData} contentFooter={false} pageSidebar={false} ad={false}>
	<Step>
		<StepItem name="入力" current={true} jsClassName="js-screen-input" />
		<StepItem name="入力" hidden={true} jsClassName="js-screen-confirm" />
		<StepItem name="確認" hidden={true} jsClassName="js-screen-input" />
		<StepItem name="確認" current={true} hidden={true} jsClassName="js-screen-confirm" />
		<StepItem name="完了" />
	</Step>

	<form method="post" novalidate="" class="js-submit-overlay" id="contact-form" data-overlayed-by="form-submit-overlay">
		<div class="js-screen-input">
			<FormGrid>
				<FormGridGroup>
					<Fragment slot="legend"><label for="input-name" class="c-label">名前 <FormLabelIcon type="optional">任意</FormLabelIcon></label></Fragment>

					<Fragment slot="contents">
						<FormCtrlInput size="24em"><input name="yourname" id="input-name" /></FormCtrlInput>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup>
					<Fragment slot="legend"><label for="input-email" class="c-label">Eメールアドレス <FormLabelIcon type="required">必須</FormLabelIcon></label></Fragment>

					<Fragment slot="contents">
						<FormCtrlInput size="24em"><input type="email" name="email" required="" autocomplete="email" id="input-email" class="js-convert-trim js-validation" aria-errormessage="input-validate-email" /></FormCtrlInput>
					</Fragment>

					<Fragment slot="validate">
						<FormInvalid id="input-validate-email" />
					</Fragment>
				</FormGridGroup>
				<FormGridGroup ctrlType="radio">
					<Fragment slot="legend"><span class="c-label" id="label-reply">返信の有無 <FormLabelIcon type="required">必須</FormLabelIcon></span></Fragment>

					<Fragment slot="contents">
						<div class="js-validation" role="radiogroup" aria-labelledby="label-reply" aria-describedby="input-description-reply" aria-errormessage="input-validate-reply">
							<label class="c-label -check">
								<input type="radio" name="reply" value="yes" required="" />
								<span class="c-label__text">必要</span>
							</label>
							<label class="c-label -check">
								<input type="radio" name="reply" value="no" required="" />
								<span class="c-label__text">不要</span>
							</label>
						</div>
					</Fragment>

					<Fragment slot="validate">
						<FormInvalid id="input-validate-reply" />
					</Fragment>

					<Fragment slot="note">
						<p id="input-description-reply">おことわり: <q>必要</q>を選択された場合でも、内容によっては返信しかねる場合があります。</p>
					</Fragment>
				</FormGridGroup>
				<FormGridGroup>
					<Fragment slot="legend"><label for="input-body" class="c-label">内容 <FormLabelIcon type="required">必須</FormLabelIcon></label></Fragment>

					<Fragment slot="contents">
						<FormCtrlTextarea blockSize="16em"><textarea name="body" required="" id="input-body" class="js-convert-trim js-validation js-textarea-auto-size" aria-errormessage="input-validate-body"></textarea></FormCtrlTextarea>
					</Fragment>

					<Fragment slot="validate">
						<FormInvalid id="input-validate-body" />
					</Fragment>
				</FormGridGroup>
			</FormGrid>

			<p><input type="hidden" name="referrer" value={referrerRootRelativePath} /></p>
		</div>

		<div class="js-screen-confirm" hidden="">
			<Table full={true}>
				<tbody>
					<tr>
						<th scope="row">名前</th>
						<td class="js-confirm-output" data-ctrl-name="yourname"></td>
					</tr>
					<tr>
						<th scope="row">Eメールアドレス</th>
						<td class="js-confirm-output" data-ctrl-name="email"></td>
					</tr>
					<tr>
						<th scope="row">返信の有無</th>
						<td class="js-confirm-output" data-ctrl-name="reply"></td>
					</tr>
					<tr>
						<th scope="row">内容</th>
						<td>
							<pre class="js-confirm-output" data-ctrl-name="body"></pre>
						</td>
					</tr>
				</tbody>
			</Table>
		</div>

		<FormButtons>
			<p class="js-screen-input" hidden="">
				<SubmitButton type="button" id="js-confirm-button">入力内容を確認</SubmitButton>
			</p>
			<p class="js-screen-confirm" hidden="">
				<SubmitButton type="button" style="cancel" id="js-correct-button">修正</SubmitButton>
			</p>
			<p class="js-screen-confirm">
				<SubmitButton name="actionsend" value="1" id="js-send-button">送信</SubmitButton>
			</p>
		</FormButtons>
	</form>

	<DialogOverlay label="送信中" id="form-submit-overlay" />
</Layout>
