---
import dayjs from 'dayjs';
import Layout from '@layouts/W0s.astro';
import CodeBlock from '@components/CodeBlock.astro';
import FootnoteReference from '@components/FootnoteReference.astro';
import LinkExternal from '@components/LinkExternal.astro';
import H from '@components/H.astro';
import Section from '@components/Section.astro';
import type { StructuredData } from '@type/types.js';

const structuredData: StructuredData = {
	title: '当サイトの Web 技術',
	dateModified: dayjs('2023-06-30'),
	breadcrumb: [{ path: '/', name: 'ホーム' }],
};
---

<Layout astroFilePath={Astro.self.moduleId} structuredData={structuredData}>
	<Section id="notice">
		<H slot="heading">おことわり</H>

		<ul class="p-list">
			<li>ここで記載していることは特記のない限り <code>w0s.jp</code> ドメインで公開しているコンテンツに関する情報である。サブドメインは状況が異なる部分も多い。</li>
			<li>当サイトは Web 技術の実験場としての役割も兼ねており、一時的なものも含めて細かい改修は度々実施しているが、本ドキュメントは常に追従できるとは限らない。</li>
		</ul>
	</Section>

	<Section id="history">
		<H slot="heading">歴史</H>

		<dl class="p-list-description">
			<dt>2001年2月</dt>
			<dd>
				<p>前身のサイトを開設。<LinkExternal href="https://web.archive.org/web/20010202073300/http://www.cool.ne.jp/">COOL ONLINE</LinkExternal>の無料会員枠を利用（容量20MB）。「地域コミュニティ」を謳っており、登録の際にまず都市を選択、それによってサブドメインが振り分けられた（e.g. <code>tokyo.cool.ne.jp</code>）。</p>
			</dd>
			<dt>2001年6月<!-- 1日 --></dt>
			<dd>
				<p>掲載写真の増大により容量面で厳しくなり、<LinkExternal href="https://web.archive.org/web/20010421065319/http://freehp.goo.ne.jp/">goo フリーホームページ</LinkExternal>に移転（容量50MB）。URL は <code is:raw>http://users.goo.ne.jp/${userId}</code> だが、IP アドレスのドメインにリダイレクトされる（ブラウザのアドレスバーには IP アドレスの数字が表示される）というすごい仕様だった。</p>
			</dd>
			<dt>2002年3月<!-- 26日 --></dt>
			<dd>
				<p><LinkExternal href="http://www.nurs.or.jp/">ネットワーク利用技術研究会（NURS）</LinkExternal>に移転。レンタルサーバーではなく研究・実験目的のサーバーであり、Telnet が制限なしに使えたので、root 権限が必要なこと以外は割となんでもできた。</p>
			</dd>
			<dt>2012年2月<!-- 12日 --></dt>
			<dd>
				<p>
					NURS はドメインがサブドメインで分ける方式ではなく全ユーザー共通であり、Cookie の導入がセキュリティ上の理由<FootnoteReference><LinkExternal href="http://takagi-hiromitsu.jp/diary/20100501.html">高木浩光＠自宅の日記 - 共用SSLサーバの危険性が理解されていない</LinkExternal>で解説されているように、フレームを利用して他サイトから読み出すことが可能なため。</FootnoteReference>で躊躇われることから<LinkExternal href="https://www.inetd.co.jp/">アイネットディー</LinkExternal>
					 に移転したうえで独自ドメインを取得。月額270円の格安サーバーにしては Cron の制限が緩いのがありがたかった。
				</p>
			</dd>
			<dt>2017年1月</dt>
			<dd>
				<p>常時 TLS の波に乗り<LinkExternal href="https://vps.sakura.ad.jp/">さくらの VPS</LinkExternal> に移転。<LinkExternal href="https://letsencrypt.org/">Let's Encrypt</LinkExternal>を利用して TLS 対応を行う。</p>
			</dd>
		</dl>
	</Section>

	<Section id="server">
		<H slot="heading">サーバー構成</H>

		<dl class="p-list-description">
			<dt>サーバー</dt>
			<dd><LinkExternal href="https://httpd.apache.org/">Apache HTTP Server</LinkExternal></dd>
			<dt>アプリケーション</dt>
			<dd><LinkExternal href="https://nodejs.org/">Node.js</LinkExternal></dd>
			<dt>フレームワーク</dt>
			<dd><LinkExternal href="https://expressjs.com/">Express</LinkExternal></dd>
			<dt>プロセス・マネージャー</dt>
			<dd><LinkExternal href="https://pm2.keymetrics.io/">PM2</LinkExternal></dd>
			<dt>データベース (RDBMS)</dt>
			<dd><LinkExternal href="https://sqlite.org/">SQLite</LinkExternal>, <LinkExternal href="https://www.mysql.com/">MySQL</LinkExternal></dd>
		</dl>

		<table class="p-table">
			<caption> ドメイン一覧</caption>
			<thead>
				<tr>
					<th scope="col">ドメイン</th>
					<th scope="col">用途</th>
					<th scope="col">備考</th>
					<th scope="col">ソースコード</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td><a href="https://w0s.jp/">w0s.jp</a></td>
					<td>個人サイト</td>
					<td></td>
					<td class="u-cell -center">
						<a href="https://github.com/SaekiTominaga/w0s.jp" aria-label="w0s.jp の GitHub"><img src="/assets/image/icon/github.svg" alt="GitHub" width="24" height="24" /></a>
					</td>
				</tr>
				<tr>
					<td><a href="https://blog.w0s.jp/">blog.w0s.jp</a></td>
					<td>ブログ</td>
					<td></td>
					<td class="u-cell -center">
						<a href="https://github.com/SaekiTominaga/blog.w0s.jp" aria-label="blog.w0s.jp の GitHub"><img src="/assets/image/icon/github.svg" alt="GitHub" width="24" height="24" /></a>
					</td>
				</tr>
				<tr>
					<td><a href="https://media.w0s.jp/">media.w0s.jp</a></td>
					<td>画像、動画、音声</td>
					<td>画像は URL パラメーターによりサイズや画質を指定して動的生成可能</td>
					<td class="u-cell -center">
						<a href="https://github.com/SaekiTominaga/media.w0s.jp" aria-label="media.w0s.jp の GitHub"><img src="/assets/image/icon/github.svg" alt="GitHub" width="24" height="24" /></a>
					</td>
				</tr>
				<tr>
					<td>report.w0s.jp</td>
					<td>エラーレポート収集</td>
					<td></td>
					<td class="u-cell -center">
						<a href="https://github.com/SaekiTominaga/report.w0s.jp" aria-label="report.w0s.jp の GitHub"><img src="/assets/image/icon/github.svg" alt="GitHub" width="24" height="24" /></a>
					</td>
				</tr>
				<tr>
					<td>analytics.w0s.jp</td>
					<td>アクセス解析</td>
					<td><LinkExternal href="https://matomo.org/">Matomo Analytics</LinkExternal> を利用</td>
					<td class="u-cell -center">―</td>
				</tr>
				<tr>
					<td><a href="https://labs.w0s.jp/">labs.w0s.jp</a></td>
					<td>Web 技術の遊び場</td>
					<td>HTTP でもアクセス可</td>
					<td class="u-cell -center">
						<a href="https://github.com/SaekiTominaga/labs.w0s.jp" aria-label="labs.w0s.jp の GitHub"><img src="/assets/image/icon/github.svg" alt="GitHub" width="24" height="24" /></a>
					</td>
				</tr>
			</tbody>
		</table>

		<ul class="p-notes">
			<li>他に slide.w0s.jp もあるが、ほとんど活用していないのであえてリンクは張らない。</li>
		</ul>
	</Section>

	<Section id="html">
		<H slot="heading">HTML</H>

		<CodeBlock
			code={`└packages
	├ html
	│└ *.html
	│└ *.json
	└ .markuplintrc
	└ packages
		└frontend
			└ public /* Static directory */
				├ *.html
				└ *.html.br`}
			caption="HTML ファイルの構成図"
		/>

		<ul class="p-list">
			<li>
				静的コンテンツは <code>&lt;main&gt;</code> 要素内を HTML 断片ファイル、タイトルや更新日時などのメタ情報を同名の JSON ファイルとして管理している。例えば当ページ（「当サイトの Web 技術」ページ）のコンテンツは以下の2ファイルとなる。
				<ul>
					<li>
						<LinkExternal href="https://github.com/SaekiTominaga/w0s.jp/blob/main/html/technology.html"><code>html/technology.html</code></LinkExternal>
					</li>
					<li>
						<LinkExternal href="https://github.com/SaekiTominaga/w0s.jp/blob/main/html/technology.json"><code>html/technology.json</code></LinkExternal>
					</li>
				</ul>
			</li>
			<li>
				その HTML 断片ファイルと JSON ファイルのデータを<LinkExternal href="https://github.com/SaekiTominaga/w0s.jp/blob/main/packages/frontend/node/src/build/Html.ts">自作の Node.js プログラム</LinkExternal>でビルドし、以下の2ファイルを静的ディレクトリに配置する。
				<ul>
					<li><LinkExternal href="https://prettier.io/">Prettier</LinkExternal> でフォーマットした HTML ファイル（e.g. <code>index.html</code>）</li>
					<li><LinkExternal href="https://github.com/vajahath/brotlin">vajahath/brotlin</LinkExternal>で Brotli 圧縮したファイル（e.g. <code>index.html.br</code>）</li>
				</ul>
			</li>
			<li>
				ビルドに際しては主に以下の変換を行っている。
				<ul>
					<li>目次の自動生成</li>
					<li><LinkExternal href="https://github.com/SaekiTominaga/w0s.jp/blob/main/packages/frontend/node/src/build/component/HtmlSectioningId.ts">セクション ID の自動生成</LinkExternal></li>
					<li><LinkExternal href="https://github.com/SaekiTominaga/w0s.jp/blob/main/packages/frontend/node/src/build/component/HtmlFootnote.ts">脚注の自動生成</LinkExternal></li>
					<li><LinkExternal href="https://github.com/SaekiTominaga/w0s.jp/blob/main/packages/frontend/node/src/build/component/HtmlAnchorIcon.ts">リンクアンカーにドメイン名（FQDN）やリソースタイプのアイコンを付与</LinkExternal></li>
					<li><LinkExternal href="https://github.com/SaekiTominaga/w0s.jp/blob/main/packages/frontend/node/src/build/component/HtmlAnchorAmazonAssociate.ts">Amazon 商品ページのリンクにアソシエイトタグを追加</LinkExternal></li>
					<li>
						<LinkExternal href="https://github.com/SaekiTominaga/w0s.jp/blob/main/packages/frontend/node/src/build/component/HtmlImage.ts"><code>&lt;picture&gt;</code> 要素を使って複数フォーマットの画像を提供する</LinkExternal>
					</li>
					<li>
						<LinkExternal href="https://github.com/SaekiTominaga/w0s.jp/blob/main/packages/frontend/node/src/build/component/HtmlTimeJapaneseDate.ts">日付文字列を <code>&lt;time datetime&gt;</code> 要素に変換</LinkExternal>
					</li>
				</ul>
			</li>
			<li>
				ビルドの際、<LinkExternal href="https://markuplint.dev/">Markuplint</LinkExternal>を使用したチェックを実施している。Markuplint の設定には<LinkExternal href="https://markuplint.dev/ja/docs/guides/presets">公式のプリセット</LinkExternal>が用意されているが、以下に挙げる理由からあえてそれらを使うことはせず、<LinkExternal href="https://github.com/SaekiTominaga/w0s/tree/main/packages/markuplint-config">本サイト向けに改めて定義した設定ファイル</LinkExternal>を使用している。
				<ul>
					<li>すべてのルールについてその効果を把握したい（公式のプリセットに頼るとその確認が疎かになってしまう）。</li>
					<li><code>markuplint:recommended</code> より厳しいルールを適用させたい箇所が複数存在する。</li>
					<li>公式のプリセットは HTML Standard や WAI-ARIA などへの仕様適合だけではなく、パフォーマンスやセキュリティを含めたベストプラクティス的な考えも取り入れられている。純粋な構文チェックに留まらないところは Markuplint の良い点であるが、そのすべてに賛同できるわけではない。たとえば <code>markuplint:performance</code> では <code>&lt;img&gt;</code> 要素に <code>decoding=async</code> の指定が必須とされているが、これで得られる効果は限定的であり、必要な箇所に限って指定するべき属性だと考えている（少なくとも当サイトでは明示的な <code>async</code> 指定が必要な画像は皆無である）。</li>
				</ul>
			</li>
			<li>HTML ページの MIME タイプは <code>text/html</code> としている。コンテンツのデータをスクレイピングで活用したいユーザーにとっては XML として処理できた方が便利だろうとの考えで以前は <code>application/xhtml+xml</code> で配信していたが、Google 翻訳（URL 指定）が対応していないなどの外部要因によりデメリットの方が大きくなってきたため、やむなく変更した次第。</li>
			<li>
				ウェブページの URL に拡張子が含まれるのは好ましくないと考えているので<FootnoteReference>Tim Berners-Lee による <LinkExternal href="https://www.w3.org/Provider/Style/URI">Cool URIs don't change</LinkExternal>でも URL にファイル名拡張子を含めることは問題を引き起こすと言われている。</FootnoteReference>、拡張子なしの URL でアクセスできるようにしている。
			</li>
		</ul>

		<Section id="html-redirect" depth={2} headingType="c">
			<H slot="heading">3xx リダイレクトページ</H>

			<div class="p-text">
				<p>URL が変更になった場合は <code>301 Moved Permanently</code>、フォームの POST 送信後には <code>303 See Other</code> などいくつかのケースでは HTTP レスポンス 3xx でリダイレクトを設定している。</p>
				<p><LinkExternal href="https://datatracker.ietf.org/doc/html/rfc7231#section-6.4">RFC 7231 の 6.4. Redirection 3xx</LinkExternal>では、ステータスコード 3xx で <code>Location</code> ヘッダーフィールドが設定されている場合のユーザーエージェントの挙動として<q lang="en" cite="https://datatracker.ietf.org/doc/html/rfc7231#section-6.4.4">the user agent <mark>MAY</mark> automatically redirect its request to the URI</q>と書かれており（あくまで <em lang="en">MAY</em> であることに注目）、実際ユーザーの環境によっては自動リダイレクトが行われず、レスポンスボディの内容が画面に表示されることがある<FootnoteReference>Android Firefox ではアプリ連携された URL に 3xx でリダイレクトすると、当該アプリが自動で起動するが、ブラウザでは 3xx のレスポンスボディが表示された状態になる。（2022年2月現在、Android Firefox 96 にて確認）</FootnoteReference>。</p>
				<p>
					当サイトで使用している Node.js フレームワークの Express では、<LinkExternal href="https://expressjs.com/en/4x/api.html#res.redirect"><code>res.redirect()</code></LinkExternal> メソッドでリダイレクト設定を行うことができるが、この場合レスポンスボディは <code is:raw>&lt;p&gt;Moved Permanently. Redirecting to &lt;a href="${path}"&gt;${path}&lt;/a&gt;&lt;/p&gt;</code> のように、DOCTYPE や <code>&lt;title&gt;</code> 要素のない不正な HTML となってしまう。これについては <LinkExternal href="https://github.com/expressjs/express/issues/5058">Issue を上げており</LinkExternal>、それに対する <LinkExternal href="https://github.com/expressjs/express/pull/5167">Pull Request も提出されている</LinkExternal>が、2023年6月現在マージはされていない。そのためこの機能は使わず、<LinkExternal href="https://expressjs.com/en/4x/api.html#res.send"><code>res.send()</code></LinkExternal> メソッドにて独自の HTML を返すようにカスタマイズしている。
				</p>
			</div>
		</Section>

		<Section id="html-clienterror" depth={2} headingType="c">
			<H slot="heading">4xx クライアントエラーページ</H>

			<div class="p-text">
				<p><code>403 Forbidden</code> および <code>404 Not Found</code> のクライアントエラーページには JavaScript で以下の機能を組み込んでいる。</p>
			</div>

			<ul class="p-list">
				<li>同一ドメインのリファラーがあった場合（= サイト内から無効なリンクが張られている）は管理者へ通知する。検知プログラムは <LinkExternal href="https://github.com/SaekiTominaga/report-same-referrer">GitHub で公開</LinkExternal>している。</li>
				<li>直近の有効な祖先ディレクトリへのリンクを提示する。（e.g. <code>/foo/bar/baz</code> へのリクエストに対し、<code>/foo/bar/baz</code> のレスポンスコードが 404 で <code>/foo/bar/</code> が 403、<code>/foo/</code> が 200 の場合、<code>/foo/</code> へのリンクアンカーを提示）</li>
				<li>
					<LinkExternal href="https://wicg.github.io/portals/"><code>&lt;portal&gt;</code> 要素</LinkExternal>に対応した環境では祖先ディレクトリへの誘導をテキストリンクだけでなく、<code>&lt;portal&gt;</code> 要素を利用した埋め込みも行うことで、遷移前にそのページのイメージが掴めるようにしている。
				</li>
			</ul>
		</Section>
	</Section>

	<Section id="style">
		<H slot="heading">スタイルシート<small>（CSS）</small></H>

		<CodeBlock
			code={`└packages
	└frontend
		└ style
		│└ *.css
		└ .postcssrc
		└ .stylelintrc.json
		└ public /* Static directory */
			└ assets
				└ style
					├ *.css
					├ *.css.br
					└ *.css.map`}
			caption="CSS ファイルの構成図"
		/>

		<ul class="p-list">
			<li><code>packages/frontend/style</code> ディレクトリ内の CSS ファイルを <LinkExternal href="https://postcss.org/">PostCSS</LinkExternal>でビルドし、<code>packages/frontend/public/assets/style</code> に配置。ビルドの際、Brotli 圧縮ファイルも同時に出力している。</li>
			<li>
				PostCSS の導入はブラウザが対応していない機能の先行使用、あるいはファイルをまとめることによるパフォーマンス向上が目的であり、標準化の見込みのないプラグインは使っていない。将来的には変換前のコードをそのままブラウザに読み込ませても問題ないようにすることが目標である。
				<table class="p-table">
					<caption> 使用しているプラグイン</caption>
					<thead>
						<tr>
							<th scope="col">プラグイン</th>
							<th scope="col">CSS 仕様</th>
							<th scope="col">W3C プロセス<small>（2023年6月現在）</small></th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td><LinkExternal href="https://github.com/postcss/postcss-media-minmax">postcss-media-minmax</LinkExternal></td>
							<td>
								<LinkExternal href="https://www.w3.org/TR/mediaqueries-4/#mq-range-context">Range Context <small>(Media Queries Level 4)</small></LinkExternal>
							</td>
							<td>Candidate Recommendation Draft</td>
						</tr>
						<tr>
							<td><LinkExternal href="https://github.com/postcss/postcss-custom-media">postcss-custom-media</LinkExternal></td>
							<td>
								<LinkExternal href="https://www.w3.org/TR/mediaqueries-5/#custom-mq">Custom Media Queries <small>(Media Queries Level 5)</small></LinkExternal>
							</td>
							<td>Working Draft</td>
						</tr>
						<tr>
							<td><LinkExternal href="https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting">postcss-nesting</LinkExternal></td>
							<td><LinkExternal href="https://www.w3.org/TR/css-nesting-1/">CSS Nesting Module</LinkExternal></td>
							<td>Working Draft</td>
						</tr>
						<tr>
							<td><LinkExternal href="https://github.com/postcss/postcss-import">postcss-import</LinkExternal></td>
							<td></td>
							<td></td>
						</tr>
						<tr>
							<td><LinkExternal href="https://cssnano.co/">CSSNANO</LinkExternal></td>
							<td></td>
							<td></td>
						</tr>
					</tbody>
				</table>
			</li>
			<li>ブラウザから読まれる CSS ファイルは上記のとおり <LinkExternal href="https://cssnano.co/">CSSNANO</LinkExternal>を適用しているが、minify 処理が目的ではなくコメントの除去など最小限の最適化のみを行っている。以前は minify 処理も行っていたが、これを止めた理由はブログ記事「<a href="https://blog.w0s.jp/674">CSS ファイルの最小化を止めた</a>」（2022年6月）にまとめている。</li>
		</ul>

		<Section id="style-print" depth={2} headingType="c">
			<H slot="heading">印刷用スタイル</H>

			<ul class="p-list">
				<li>ディスプレイ表示の眩しさを低減するため、ページの背景色は白色ではなく、若干黄味がかった色を設定している。印刷時にはそのような配慮は不要なので <code>@print</code> を使って完全な白（<code>#ffffff</code>）に設定している。</li>
			</ul>
		</Section>

		<Section id="style-reader" depth={2} headingType="c">
			<H slot="heading">リーダーモード</H>

			<ul class="p-list">
				<li>昨今のブラウザはリーダーモードを備えたものも多いが、制作者の意図どおりに表示されるとは限らないため、それとは別個に制作者スタイルシートにてリーダーモードを実装している。</li>
				<li>ヘッダーやフッターを非表示にする簡易なスタイルシートを用意し、<LinkExternal href="https://html.spec.whatwg.org/multipage/links.html#the-link-is-an-alternative-stylesheet">代替スタイルシート</LinkExternal>で任意に適用可能な状態としている。PC 版 Firefox ではメニューバーの「表示」→「スタイルシート」から切り替え可能である。Chrome など他ブラウザでも拡張機能が公開されている。</li>
			</ul>
		</Section>
	</Section>

	<Section id="script">
		<H slot="heading">スクリプト<small>（JavaScript）</small></H>

		<CodeBlock
			code={`└packages
	└frontend
		└ script
		│└ *.ts
		└ .eslintrc.json
		└ rollup.config.js
		└ public /* Static directory */
			└ assets
				└ script
					├ *.mjs /* 一部は拡張子が \`.js\` */
					├ *.mjs.br
					└ *.mjs.map`}
			caption="JavaScript ファイルの構成図"
		/>

		<ul class="p-list">
			<li>基本的な考え方として JavaScript は補助的な使用とし、スクリプトが動かない環境でもコンテンツの閲覧、操作に支障がないようにしている。昨今ではモバイルブラウザも含めてほとんどの閲覧環境が JavaScript に対応しているが、一方でユーザーの環境によって（有効設定であっても）スクリプトが動かないケースは往々にして存在する<FootnoteReference>具体的な事例をすべて挙げるとキリがないが、一例として JavaScript の URL に `<code>ads</code>` が含まれていると広告ブロッカーを適用した環境ではそのスクリプトがロードされず、結果的にスクリプト無効設定と同じ状況になるかもしれない。ここで考えるべきは「そのようなツールを使って不利益を被るのは自己責任」か、それとも「広告ブロッカーを含めブラウザをカスタマイズするのはユーザーの権利であり配慮が必要」かということだが、私は後者の考え方を持っている。一方で「URL に `<code>ads</code>` を含める」ことは JavaScript や HTTP はもとより Web の仕組み上なんら問題なく、特定のツールに対する配慮で URL を変更するのは避けたい。そもそもが小手先の対策をせずとも、スクリプト無効でコンテンツが閲覧できる状態さえ保っていれば、ユーザーのブラウザ上でスクリプトが想定どおり動くかどうかなど<em>気にする必要すらない</em>のであり、制作上のコストパフォーマンスの観点からもこれがもっとも簡単なのである。</FootnoteReference>。当サイトのようなテキストと画像による表現が中心の Web サイトは現代においてもスクリプト無効で閲覧できるようにするのはメリットが大きいと考えている。</li>
			<li><code>packages/frontend/script</code> ディレクトリ内の TypeScript ファイルを <LinkExternal href="https://www.rollupjs.org/">Rollup</LinkExternal> でビルドし、<code>packages/frontend/public/assets/script</code> に配置。ビルドの際、ソースマップ、Brotli 圧縮ファイルも同時に出力している。</li>
			<li>外部サービスに関係した機能など一部を除き ES modules で作成しており、本来であれば機能毎に別れたファイルを <code>import</code> / <code>export</code> を使ってそのままブラウザに読ませることができるが、一時期そのようにしてみたところ HTTP/2 通信下であっても画面描画への影響が体感できるほど大きかったため、現在ではビルド時にファイル結合を行うようにしている。</li>
		</ul>

		<Section id="script-error" depth={2} headingType="c">
			<H slot="heading">エラー検知</H>

			<ul class="p-list">
				<li>
					制作したスクリプト機能は普段使いのブラウザでの軽い動作確認はしているが、きちんとしたテストは行っていない。というより、サーバーサイドプログラムとは異なりブラウザには様々な設定項目があり、Bot 等も含めたあらゆる環境を想定したテストを行うことなど不可能だと考えている。もとより前述のとおりスクリプトが動かなくてもコンテンツの閲覧には支障がないため、テストはそこそこで良いと割り切り、せめて発生してしまったエラーは把握できるよう、<code>error</code> イベントを検知し通知する機能を組み込んでいる。簡略化したコード例を下記に示す。

					<CodeBlock
						code={`window.addEventListener('error', (ev) => {
	const formData = new FormData();
	formData.append('location', location.toString());
	formData.append('message', ev.message);
	formData.append('filename', ev.filename);
	formData.append('lineno', String(ev.lineno));
	formData.append('colno', String(ev.colno));

	fetch(ENDPOINT, {
		method: 'POST',
		body: new URLSearchParams([...formData]),
	});
});`}
						language="javascript"
					/>

					 実際の検知プログラムは <LinkExternal href="https://github.com/SaekiTominaga/report-js-error">GitHub で公開</LinkExternal>している。
				</li>
				<li>
					これにより、事前確認が難しい以下のようなケースで発生したエラーも検知することができる。
					<ul>
						<li>古いブラウザ</li>
						<li>ブラウザの設定やアドオンに起因するもの</li>
						<li>検索エンジンのロボットなどブラウザ以外の環境</li>
					</ul>
				</li>
			</ul>
		</Section>
	</Section>

	<Section id="bitmap">
		<H slot="heading">ビットマップ画像<small>（JPEG, PNG）</small></H>

		<ul class="p-list">
			<li>
				昨今、高解像度ディスプレイの普及や WebP, AVIF など新フォーマットの登場により、環境に合わせて画像表示を最適化しようとすれば多くの出し分けが必要になってきている。当サイトでは基本的に以下6種類の画像を <code>&lt;a&gt;</code> 要素と <code>&lt;picture&gt;</code> 要素を使って提示している。
				<ul>
					<li>大画像（JPEG ないし PNG）</li>
					<li>サムネイル: AVIF</li>
					<li>サムネイル: AVIF, @2x</li>
					<li>サムネイル: WebP</li>
					<li>サムネイル: WebP, @2x</li>
					<li>サムネイル: JPEG （※ WebP 未対応環境は減少しているため、JPEG の @2x 画像は用意しない）</li>
				</ul>
				 マークアップのイメージを下記に記す。なお、画像の説明は極力本文か <code>&lt;figcaption&gt;</code> 要素で行う方針のため、<code>&lt;img&gt;</code> 要素の <code>alt</code> 属性値に長々とした文章を書くことはあまりなく、大抵は一律の短い文言である。
				<CodeBlock
					code={`<a href="image.jpg" type="image/jpeg">
	<picture>
		<source type="image/avif" srcset="thumb.avif, thumb@2x.avif 2x"/>
		<source type="image/webp" srcset="thumb.webp, thumb@2x.webp 2x"/>
		<img src="thumb.jpeg" alt="画像"/>
	</picture>
</a>`}
					language="html"
				/>
			</li>
			<li>大画像（上記コード例でいえば <code>image.jpg</code>）は Photoshop などの画像編集ソフトで生成する。大画像といっても、デジタルカメラの画像あるいはフィルム写真をスキャンした元素材そのままではなく Web 用に縮小をしているが、一般的な PC 用ディスプレイで全画面表示しても問題ない大きさとしている。なお、JPEG ファイルの拡張子は Photoshop のデフォルト動作に合わせて <code>.jpg</code> としている（<code>.jpeg</code> ではない）。</li>
		</ul>

		<Section id="bitmap-thumbnail" depth={2} headingType="c">
			<H slot="heading">サムネイル生成</H>

			<div class="p-text">
				<p>サムネイル画像は大画像ファイルをソースとして自動生成しているが、以下に示す理由から事前に静的ファイルを生成する方式は運用が面倒になることが予想された。</p>
			</div>

			<ul class="p-list">
				<li>使用するページによって表示する大きさが異なる</li>
				<li>ページのリニューアルや CSS の調整で後から大きさが変わることもあり得る</li>
			</ul>

			<div class="p-text">
				<p>そのためパフォーマンス的に不利な面はあるが、<code>/thumbimage/path/to/image.jpg?type=webp;w=360;h=240;quality=30</code> のように URL パラメーターでサイズや画質を指定して動的生成する方式とした。詳細は画像を配置している <a href="https://media.w0s.jp/">media.w0s.jp</a> にドキュメントを置いているが、ドキュメントで触れていないポイントについて下記に述べる。</p>
			</div>

			<ul class="p-list">
				<li>
					URL パラメーターの区切り文字は一般的な <code>&amp;</code> だけでなく <code>;</code> にも対応しており、後者を利用する。これは HTML4 時代に <LinkExternal href="https://www.w3.org/TR/2018/SPSD-html401-20180327/appendix/notes.html#h-B.2.2">B.2.2 Ampersands in URI attribute values</LinkExternal>で推奨されていたテクニックである。設定は Express の <LinkExternal href="https://expressjs.com/en/4x/api.html#app.settings.table"><code>app.set('query parser', value)</code></LinkExternal>にカスタムクエリ文字列解析関数を指定することで実現している。
				</li>
				<li>
					画像生成は <LinkExternal href="https://sharp.pixelplumbing.com/">sharp</LinkExternal>を利用しているが、AVIF への変換は JPEG や WebP と比較して遅く、多数の画像を埋め込んだページでは画像がすべて表示されるまでに多大な時間が掛かったり、タイムアウトしたりするケースが多発してしまった。 そのため AVIF の初回リクエスト（サムネイルファイルが生成されていない状態でのリクエスト）に限っては代替として WebP を生成して返し、別途バッチ処理で AVIF を生成するようにしている。この場合、ブラウザ視点では「<code>&lt;source type="image/avif"&gt;</code> の画像をリクエストしたらレスポンスで <code>image/webp</code> が返ってきた」という状態になる。一見違和感があるものの <LinkExternal href="https://html.spec.whatwg.org/multipage/embedded-content.html#the-source-element">HTML 仕様における <code>&lt;source&gt;</code> 要素の定義</LinkExternal>では <q lang="en" cite="https://html.spec.whatwg.org/multipage/embedded-content.html#the-source-element">The type attribute gives the type of the images in the source set, to allow the user agent to skip to the next source element if it does not support the given type.</q> とされているため問題なく、どのブラウザも正常に動作する。
				</li>
				<li>
					一般論として GET リクエストでファイル生成という副作用を及ぼすのは好ましいことではなく、可能なら POST や PUT リクエストを使うべきだろう。これについては
					<LinkExternal href="https://tools.ietf.org/html/rfc7231#section-4.2.1">RFC 7231 の 4.2.1. Safe Methods</LinkExternal>
					 では
					<q lang="en" cite="https://tools.ietf.org/html/rfc7231#section-4.2.1">This definition of safe methods does not prevent an implementation from including behavior that is potentially harmful, that is not entirely read-only, or that causes side effects while invoking a safe method.</q>と書かれており、
					<ul>
						<li>副作用を起こす実装が禁止されているものではない</li>
						<li>アクセスログのように GET リクエストでサーバー内にファイルを追加・更新する機能は一般的に存在する</li>
						<li>そもそも本機能の要件は GET リクエストでないと実現できない</li>
					</ul>
					 といった理由から GET リクエストでファイル生成を行うようにしている。
				</li>
			</ul>
		</Section>
	</Section>

	<Section id="vector">
		<H slot="heading">ベクター画像<small>（SVG）</small></H>

		<CodeBlock
			code={`└packages
	└frontend
		├ image
		│└ *.svg
		├ svgo.config.cjs
		└ public /* Static directory */
			├ *.svg
			└ *.svg.br`}
			caption="SVG ファイルの構成図"
		/>

		<ul class="p-list">
			<li>
				簡単なものはエディターで手打ちするが、複雑な画像は Illustrator などの画像編集ソフトで作成し、
				<code>packages/frontend/image</code> ディレクトリ（非公開領域）に配置する。
			</li>
			<li><code>packages/frontend/image</code> ディレクトリ内の SVG ファイルを <LinkExternal href="https://github.com/svg/svgo">SVGO</LinkExternal>で最適化し、静的ディレクトリに配置。最適化の際、Brotli 圧縮ファイルも同時に出力している。</li>
		</ul>
	</Section>

	<Section id="favicon">
		<H slot="heading">ファビコン<small>（favicon.ico）</small></H>

		<ul class="p-list">
			<li>ファビコンは SVG 形式で提供している。</li>
			<li>
				<LinkExternal href="https://web.archive.org/web/20150306041048/http://support.microsoft.com/kb/415022/ja">Internet Explorer 5 の実装を発端とする歴史的な経緯</LinkExternal>により、<code>/favicon.ico</code> のファイルパスにすることでブラウザが自動的に読み取るようになっている。あくまで URL が <code>/favicon.ico</code> であれば良く、ファイルの実体が ICO 形式である必要はないため、SVG 形式のファビコンファイルを <code>/favicon.ico</code> で提供することで <code>&lt;link rel="icon"&gt;</code> の記述を省略できる。このため以下の特別な処理を行っている。
				<ul>
					<li>ファビコン用 SVG ファイルの生成は<a href="#vector">他の SVG 画像</a>と同様に、<LinkExternal href="https://github.com/svg/svgo">SVGO</LinkExternal>による最適化や Brotli 圧縮ファイルの同時生成を行っているが、ビルド処理の際に拡張子を <code>favicon.svg</code> → <code>favicon.ico</code> に変更する。</li>
					<li>通常、<code>Content-Type</code> レスポンスヘッダー（MIME タイプ）はファイル拡張子によって決定されるが、<code>/favicon.ico</code> に限ってはファイルパスで判断し、<code>image/svg+xml</code> を返す。</li>
				</ul>
				 詳細はブログ記事「<a href="https://blog.w0s.jp/656">SVG ファビコンのファイル名を <code>favicon.ico</code> にして <code>&lt;link rel="icon"&gt;</code> を省略する</a>」（2021年10月）にまとめている。
			</li>
		</ul>
	</Section>

	<Section id="compress">
		<H slot="heading">圧縮</H>

		<ul class="p-list">
			<li>前述のとおり、事前に静的ファイルをビルドする HTML, CSS, JavaScript, SVG はビルド時に Brotli ファイル（<code>*.br</code>）も生成している。これらは圧縮品質を最高にし、極力ファイルサイズが小さくなるようにしている。</li>
			<li>それ以外の静的リソース、および動的ページ（リクエストがある毎にサーバーサイドで HTML を生成するページ）は Express のミドルウェア <LinkExternal href="https://github.com/expressjs/compression">expressjs/compression</LinkExternal>により、レスポンス返却時に gzip の圧縮を行っている。ただし、しきい値の設定を行っており、<code>robots.txt</code> などファイルサイズが僅かなリソースは圧縮されない。</li>
		</ul>
	</Section>

	<Section id="csp">
		<H slot="heading">CSP</H>

		<ul class="p-list">
			<li>Fetch ディレクティブ（*-src）は <code>Content-Security-Policy-Report-Only</code> で設定。ユーザースタイルシート、ユーザースクリプトによるカスタマイズを妨げないため、あくまで実態調査目的として Report-Only にしている。</li>
			<li>Trusted Types 関係も現状は <code>Content-Security-Policy-Report-Only</code> で設定。</li>
			<li>それ以外のディレクティブは <code>Content-Security-Policy</code> で設定。</li>
			<li>Reporting は <LinkExternal href="https://report-uri.com/">Report URI</LinkExternal> を利用。</li>
			<li>
				当サイトでは主に以下の外部サービスを使っているため、これらの指定が多くを占める。
				<ul>
					<li>Google AdSense</li>
					<li>YouTube 動画埋め込み</li>
					<li>Amazon アソシエイトリンク</li>
				</ul>
			</li>
		</ul>
	</Section>
</Layout>
