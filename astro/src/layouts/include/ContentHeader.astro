---
import Link from '@components/Link.astro';
import type { StructuredData } from '@type/types.js';

interface Props {
	pagePath: string;
	structuredData: StructuredData;
	tocData?: Map<string, string>;
}

const { pagePath, structuredData, tocData } = Astro.props;
---

<div class="l-content__header">
	{
		structuredData.breadcrumb !== undefined && (
			<nav class="p-breadcrumb" aria-label="パンくず">
				{structuredData.breadcrumb.map((breadcrumbItem, index) => (
					<>
						{index === 0 && <a href={breadcrumbItem.path}>ホーム</a>}
						{index >= 1 && (
							<>
								<span class="p-breadcrumb__separator">&gt;</span>
								<a href={breadcrumbItem.path}>{breadcrumbItem.name}</a>
							</>
						)}
					</>
				))}
				<span class="p-breadcrumb__separator">&gt;</span>
				<a aria-current="page">現在のページ</a>
			</nav>
		)
	}

	<hgroup class="p-title">
		{structuredData.subHeading === undefined && <h1>{structuredData.heading ?? structuredData.title}</h1>}
		{
			structuredData.subHeading !== undefined && (
				<h1>
					{structuredData.heading ?? structuredData.title}
					<span class="p-title__sub-hdg">（{structuredData.subHeading}）</span>
				</h1>
			)
		}
		{
			structuredData.dateModified !== undefined && (
				<p class="p-title__update">
					<time datetime={structuredData.dateModified.format('YYYY-MM-DD')}>{structuredData.dateModified.format('YYYY年M月D日')}</time>更新
				</p>
			)
		}
	</hgroup>

	{
		structuredData.localNav !== undefined && (
			<nav aria-label={structuredData.localNav.label}>
				<ul class="p-local-nav">
					{structuredData.localNav.items.map((localNavItem) => (
						<li>
							{localNavItem.path !== pagePath && (
								<Link href={localNavItem.path} bullet={true}>
									{localNavItem.name}
								</Link>
							)}
							{localNavItem.path === pagePath && <Link bullet={true}>{localNavItem.name}</Link>}
						</li>
					))}
				</ul>
			</nav>
		)
	}

	{structuredData.description !== undefined && <p class="p-description">{structuredData.description}</p>}

	{
		tocData !== undefined && tocData.size >= 2 && (
			<ol class:list={['toc', structuredData.tocDirection !== undefined ? `-${structuredData.tocDirection}` : undefined]} aria-label="目次">
				{[...tocData].map(([id, headingHtml]) => (
					<li>
						<a href={`#${encodeURIComponent(id)}`} set:html={headingHtml} />
					</li>
				))}
			</ol>
		)
	}
</div>

<style>
	.toc {
		--_direction: column;
		--_icon-inline-size: 0.75em; /* アイコンの幅 */
		--_icon-block-size: calc(var(--_icon-inline-size) * 0.75); /* アイコンの高さ */
		--_icon-color: var(--color-gray); /* アイコンの色 */
		--_icon-gap: 0.5em; /* アイコンと後続テキストの間隔 */

		display: block flex;
		flex-flow: var(--_direction) wrap;
		gap: 0.75em 1.5em;
		border: 1px solid var(--color-border-dark);
		border-radius: var(--border-radius-normal);
		background: var(--color-bg-superlight);
		padding: 1.25em min(1.25dvi, 1.25em);
		line-height: var(--line-height-narrow);

		&.-row {
			--_direction: row;
		}

		& > :global(li) {
			margin-inline-start: calc(var(--_icon-inline-size) + var(--_icon-gap));
			font-size: calc(100% * pow(var(--font-ratio), 1));
		}

		& :global(:any-link) {
			margin-inline-start: calc(0px - var(--_icon-inline-size) - var(--_icon-gap));
			outline-offset: var(--outline-offset-linkonly);
		}

		& :global(:any-link::before) {
			display: inline flow-root;
			clip-path: var(--shape-pagelink-triangle);
			margin-inline-end: var(--_icon-gap);
			border-block-start: var(--_icon-block-size) solid var(--_icon-color);
			inline-size: var(--_icon-inline-size);
			content: '';
		}

		& :global(:any-link:hover) {
			--_icon-color: var(--link-color-hover);
		}
	}
</style>
